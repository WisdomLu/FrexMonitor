/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-12")
public class AppInfo implements org.apache.thrift.TBase<AppInfo, AppInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AppInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PKG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("iconUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VERSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("versionName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DEVELOPER_FIELD_DESC = new org.apache.thrift.protocol.TField("developer", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APP_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("appLanguage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("minSdkVersion", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see AppType
   */
  public AppType type; // required
  public String pkgName; // optional
  public String appName; // optional
  public String iconUrl; // optional
  public String logoUrl; // optional
  public String fileSize; // optional
  public String versionCode; // optional
  public String versionName; // optional
  public String developer; // optional
  public String appLanguage; // optional
  public String minSdkVersion; // optional
  public String desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see AppType
     */
    TYPE((short)1, "type"),
    PKG_NAME((short)2, "pkgName"),
    APP_NAME((short)3, "appName"),
    ICON_URL((short)4, "iconUrl"),
    LOGO_URL((short)5, "logoUrl"),
    FILE_SIZE((short)6, "fileSize"),
    VERSION_CODE((short)7, "versionCode"),
    VERSION_NAME((short)8, "versionName"),
    DEVELOPER((short)9, "developer"),
    APP_LANGUAGE((short)10, "appLanguage"),
    MIN_SDK_VERSION((short)11, "minSdkVersion"),
    DESC((short)12, "desc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // PKG_NAME
          return PKG_NAME;
        case 3: // APP_NAME
          return APP_NAME;
        case 4: // ICON_URL
          return ICON_URL;
        case 5: // LOGO_URL
          return LOGO_URL;
        case 6: // FILE_SIZE
          return FILE_SIZE;
        case 7: // VERSION_CODE
          return VERSION_CODE;
        case 8: // VERSION_NAME
          return VERSION_NAME;
        case 9: // DEVELOPER
          return DEVELOPER;
        case 10: // APP_LANGUAGE
          return APP_LANGUAGE;
        case 11: // MIN_SDK_VERSION
          return MIN_SDK_VERSION;
        case 12: // DESC
          return DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PKG_NAME,_Fields.APP_NAME,_Fields.ICON_URL,_Fields.LOGO_URL,_Fields.FILE_SIZE,_Fields.VERSION_CODE,_Fields.VERSION_NAME,_Fields.DEVELOPER,_Fields.APP_LANGUAGE,_Fields.MIN_SDK_VERSION,_Fields.DESC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AppType.class)));
    tmpMap.put(_Fields.PKG_NAME, new org.apache.thrift.meta_data.FieldMetaData("pkgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("iconUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("versionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVELOPER, new org.apache.thrift.meta_data.FieldMetaData("developer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("appLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("minSdkVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppInfo.class, metaDataMap);
  }

  public AppInfo() {
  }

  public AppInfo(
    AppType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppInfo(AppInfo other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPkgName()) {
      this.pkgName = other.pkgName;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetIconUrl()) {
      this.iconUrl = other.iconUrl;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetFileSize()) {
      this.fileSize = other.fileSize;
    }
    if (other.isSetVersionCode()) {
      this.versionCode = other.versionCode;
    }
    if (other.isSetVersionName()) {
      this.versionName = other.versionName;
    }
    if (other.isSetDeveloper()) {
      this.developer = other.developer;
    }
    if (other.isSetAppLanguage()) {
      this.appLanguage = other.appLanguage;
    }
    if (other.isSetMinSdkVersion()) {
      this.minSdkVersion = other.minSdkVersion;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
  }

  public AppInfo deepCopy() {
    return new AppInfo(this);
  }

  
  public void clear() {
    this.type = null;
    this.pkgName = null;
    this.appName = null;
    this.iconUrl = null;
    this.logoUrl = null;
    this.fileSize = null;
    this.versionCode = null;
    this.versionName = null;
    this.developer = null;
    this.appLanguage = null;
    this.minSdkVersion = null;
    this.desc = null;
  }

  /**
   * 
   * @see AppType
   */
  public AppType getType() {
    return this.type;
  }

  /**
   * 
   * @see AppType
   */
  public AppInfo setType(AppType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getPkgName() {
    return this.pkgName;
  }

  public AppInfo setPkgName(String pkgName) {
    this.pkgName = pkgName;
    return this;
  }

  public void unsetPkgName() {
    this.pkgName = null;
  }

  /** Returns true if field pkgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgName() {
    return this.pkgName != null;
  }

  public void setPkgNameIsSet(boolean value) {
    if (!value) {
      this.pkgName = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public AppInfo setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getIconUrl() {
    return this.iconUrl;
  }

  public AppInfo setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  public void unsetIconUrl() {
    this.iconUrl = null;
  }

  /** Returns true if field iconUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIconUrl() {
    return this.iconUrl != null;
  }

  public void setIconUrlIsSet(boolean value) {
    if (!value) {
      this.iconUrl = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public AppInfo setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getFileSize() {
    return this.fileSize;
  }

  public AppInfo setFileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  public void unsetFileSize() {
    this.fileSize = null;
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return this.fileSize != null;
  }

  public void setFileSizeIsSet(boolean value) {
    if (!value) {
      this.fileSize = null;
    }
  }

  public String getVersionCode() {
    return this.versionCode;
  }

  public AppInfo setVersionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  public void unsetVersionCode() {
    this.versionCode = null;
  }

  /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCode() {
    return this.versionCode != null;
  }

  public void setVersionCodeIsSet(boolean value) {
    if (!value) {
      this.versionCode = null;
    }
  }

  public String getVersionName() {
    return this.versionName;
  }

  public AppInfo setVersionName(String versionName) {
    this.versionName = versionName;
    return this;
  }

  public void unsetVersionName() {
    this.versionName = null;
  }

  /** Returns true if field versionName is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionName() {
    return this.versionName != null;
  }

  public void setVersionNameIsSet(boolean value) {
    if (!value) {
      this.versionName = null;
    }
  }

  public String getDeveloper() {
    return this.developer;
  }

  public AppInfo setDeveloper(String developer) {
    this.developer = developer;
    return this;
  }

  public void unsetDeveloper() {
    this.developer = null;
  }

  /** Returns true if field developer is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloper() {
    return this.developer != null;
  }

  public void setDeveloperIsSet(boolean value) {
    if (!value) {
      this.developer = null;
    }
  }

  public String getAppLanguage() {
    return this.appLanguage;
  }

  public AppInfo setAppLanguage(String appLanguage) {
    this.appLanguage = appLanguage;
    return this;
  }

  public void unsetAppLanguage() {
    this.appLanguage = null;
  }

  /** Returns true if field appLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetAppLanguage() {
    return this.appLanguage != null;
  }

  public void setAppLanguageIsSet(boolean value) {
    if (!value) {
      this.appLanguage = null;
    }
  }

  public String getMinSdkVersion() {
    return this.minSdkVersion;
  }

  public AppInfo setMinSdkVersion(String minSdkVersion) {
    this.minSdkVersion = minSdkVersion;
    return this;
  }

  public void unsetMinSdkVersion() {
    this.minSdkVersion = null;
  }

  /** Returns true if field minSdkVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetMinSdkVersion() {
    return this.minSdkVersion != null;
  }

  public void setMinSdkVersionIsSet(boolean value) {
    if (!value) {
      this.minSdkVersion = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public AppInfo setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((AppType)value);
      }
      break;

    case PKG_NAME:
      if (value == null) {
        unsetPkgName();
      } else {
        setPkgName((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIconUrl();
      } else {
        setIconUrl((String)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((String)value);
      }
      break;

    case VERSION_CODE:
      if (value == null) {
        unsetVersionCode();
      } else {
        setVersionCode((String)value);
      }
      break;

    case VERSION_NAME:
      if (value == null) {
        unsetVersionName();
      } else {
        setVersionName((String)value);
      }
      break;

    case DEVELOPER:
      if (value == null) {
        unsetDeveloper();
      } else {
        setDeveloper((String)value);
      }
      break;

    case APP_LANGUAGE:
      if (value == null) {
        unsetAppLanguage();
      } else {
        setAppLanguage((String)value);
      }
      break;

    case MIN_SDK_VERSION:
      if (value == null) {
        unsetMinSdkVersion();
      } else {
        setMinSdkVersion((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case PKG_NAME:
      return getPkgName();

    case APP_NAME:
      return getAppName();

    case ICON_URL:
      return getIconUrl();

    case LOGO_URL:
      return getLogoUrl();

    case FILE_SIZE:
      return getFileSize();

    case VERSION_CODE:
      return getVersionCode();

    case VERSION_NAME:
      return getVersionName();

    case DEVELOPER:
      return getDeveloper();

    case APP_LANGUAGE:
      return getAppLanguage();

    case MIN_SDK_VERSION:
      return getMinSdkVersion();

    case DESC:
      return getDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case PKG_NAME:
      return isSetPkgName();
    case APP_NAME:
      return isSetAppName();
    case ICON_URL:
      return isSetIconUrl();
    case LOGO_URL:
      return isSetLogoUrl();
    case FILE_SIZE:
      return isSetFileSize();
    case VERSION_CODE:
      return isSetVersionCode();
    case VERSION_NAME:
      return isSetVersionName();
    case DEVELOPER:
      return isSetDeveloper();
    case APP_LANGUAGE:
      return isSetAppLanguage();
    case MIN_SDK_VERSION:
      return isSetMinSdkVersion();
    case DESC:
      return isSetDesc();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppInfo)
      return this.equals((AppInfo)that);
    return false;
  }

  public boolean equals(AppInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_pkgName = true && this.isSetPkgName();
    boolean that_present_pkgName = true && that.isSetPkgName();
    if (this_present_pkgName || that_present_pkgName) {
      if (!(this_present_pkgName && that_present_pkgName))
        return false;
      if (!this.pkgName.equals(that.pkgName))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_iconUrl = true && this.isSetIconUrl();
    boolean that_present_iconUrl = true && that.isSetIconUrl();
    if (this_present_iconUrl || that_present_iconUrl) {
      if (!(this_present_iconUrl && that_present_iconUrl))
        return false;
      if (!this.iconUrl.equals(that.iconUrl))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_fileSize = true && this.isSetFileSize();
    boolean that_present_fileSize = true && that.isSetFileSize();
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (!this.fileSize.equals(that.fileSize))
        return false;
    }

    boolean this_present_versionCode = true && this.isSetVersionCode();
    boolean that_present_versionCode = true && that.isSetVersionCode();
    if (this_present_versionCode || that_present_versionCode) {
      if (!(this_present_versionCode && that_present_versionCode))
        return false;
      if (!this.versionCode.equals(that.versionCode))
        return false;
    }

    boolean this_present_versionName = true && this.isSetVersionName();
    boolean that_present_versionName = true && that.isSetVersionName();
    if (this_present_versionName || that_present_versionName) {
      if (!(this_present_versionName && that_present_versionName))
        return false;
      if (!this.versionName.equals(that.versionName))
        return false;
    }

    boolean this_present_developer = true && this.isSetDeveloper();
    boolean that_present_developer = true && that.isSetDeveloper();
    if (this_present_developer || that_present_developer) {
      if (!(this_present_developer && that_present_developer))
        return false;
      if (!this.developer.equals(that.developer))
        return false;
    }

    boolean this_present_appLanguage = true && this.isSetAppLanguage();
    boolean that_present_appLanguage = true && that.isSetAppLanguage();
    if (this_present_appLanguage || that_present_appLanguage) {
      if (!(this_present_appLanguage && that_present_appLanguage))
        return false;
      if (!this.appLanguage.equals(that.appLanguage))
        return false;
    }

    boolean this_present_minSdkVersion = true && this.isSetMinSdkVersion();
    boolean that_present_minSdkVersion = true && that.isSetMinSdkVersion();
    if (this_present_minSdkVersion || that_present_minSdkVersion) {
      if (!(this_present_minSdkVersion && that_present_minSdkVersion))
        return false;
      if (!this.minSdkVersion.equals(that.minSdkVersion))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_pkgName = true && (isSetPkgName());
    list.add(present_pkgName);
    if (present_pkgName)
      list.add(pkgName);

    boolean present_appName = true && (isSetAppName());
    list.add(present_appName);
    if (present_appName)
      list.add(appName);

    boolean present_iconUrl = true && (isSetIconUrl());
    list.add(present_iconUrl);
    if (present_iconUrl)
      list.add(iconUrl);

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_fileSize = true && (isSetFileSize());
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_versionCode = true && (isSetVersionCode());
    list.add(present_versionCode);
    if (present_versionCode)
      list.add(versionCode);

    boolean present_versionName = true && (isSetVersionName());
    list.add(present_versionName);
    if (present_versionName)
      list.add(versionName);

    boolean present_developer = true && (isSetDeveloper());
    list.add(present_developer);
    if (present_developer)
      list.add(developer);

    boolean present_appLanguage = true && (isSetAppLanguage());
    list.add(present_appLanguage);
    if (present_appLanguage)
      list.add(appLanguage);

    boolean present_minSdkVersion = true && (isSetMinSdkVersion());
    list.add(present_minSdkVersion);
    if (present_minSdkVersion)
      list.add(minSdkVersion);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    return list.hashCode();
  }

  
  public int compareTo(AppInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPkgName()).compareTo(other.isSetPkgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgName, other.pkgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconUrl()).compareTo(other.isSetIconUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconUrl, other.iconUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionName()).compareTo(other.isSetVersionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionName, other.versionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeveloper()).compareTo(other.isSetDeveloper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developer, other.developer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppLanguage()).compareTo(other.isSetAppLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appLanguage, other.appLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinSdkVersion()).compareTo(other.isSetMinSdkVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinSdkVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minSdkVersion, other.minSdkVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AppInfo(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetPkgName()) {
      if (!first) sb.append(", ");
      sb.append("pkgName:");
      if (this.pkgName == null) {
        sb.append("null");
      } else {
        sb.append(this.pkgName);
      }
      first = false;
    }
    if (isSetAppName()) {
      if (!first) sb.append(", ");
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetIconUrl()) {
      if (!first) sb.append(", ");
      sb.append("iconUrl:");
      if (this.iconUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.iconUrl);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetFileSize()) {
      if (!first) sb.append(", ");
      sb.append("fileSize:");
      if (this.fileSize == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSize);
      }
      first = false;
    }
    if (isSetVersionCode()) {
      if (!first) sb.append(", ");
      sb.append("versionCode:");
      if (this.versionCode == null) {
        sb.append("null");
      } else {
        sb.append(this.versionCode);
      }
      first = false;
    }
    if (isSetVersionName()) {
      if (!first) sb.append(", ");
      sb.append("versionName:");
      if (this.versionName == null) {
        sb.append("null");
      } else {
        sb.append(this.versionName);
      }
      first = false;
    }
    if (isSetDeveloper()) {
      if (!first) sb.append(", ");
      sb.append("developer:");
      if (this.developer == null) {
        sb.append("null");
      } else {
        sb.append(this.developer);
      }
      first = false;
    }
    if (isSetAppLanguage()) {
      if (!first) sb.append(", ");
      sb.append("appLanguage:");
      if (this.appLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.appLanguage);
      }
      first = false;
    }
    if (isSetMinSdkVersion()) {
      if (!first) sb.append(", ");
      sb.append("minSdkVersion:");
      if (this.minSdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.minSdkVersion);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppInfoStandardSchemeFactory implements SchemeFactory {
    public AppInfoStandardScheme getScheme() {
      return new AppInfoStandardScheme();
    }
  }

  private static class AppInfoStandardScheme extends StandardScheme<AppInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.ocean.app.dis.proxy.thrift.entity.AppType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PKG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgName = iprot.readString();
              struct.setPkgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconUrl = iprot.readString();
              struct.setIconUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileSize = iprot.readString();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionCode = iprot.readString();
              struct.setVersionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VERSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionName = iprot.readString();
              struct.setVersionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEVELOPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developer = iprot.readString();
              struct.setDeveloperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APP_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appLanguage = iprot.readString();
              struct.setAppLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MIN_SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minSdkVersion = iprot.readString();
              struct.setMinSdkVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pkgName != null) {
        if (struct.isSetPkgName()) {
          oprot.writeFieldBegin(PKG_NAME_FIELD_DESC);
          oprot.writeString(struct.pkgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.iconUrl != null) {
        if (struct.isSetIconUrl()) {
          oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
          oprot.writeString(struct.iconUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileSize != null) {
        if (struct.isSetFileSize()) {
          oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
          oprot.writeString(struct.fileSize);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionCode != null) {
        if (struct.isSetVersionCode()) {
          oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
          oprot.writeString(struct.versionCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionName != null) {
        if (struct.isSetVersionName()) {
          oprot.writeFieldBegin(VERSION_NAME_FIELD_DESC);
          oprot.writeString(struct.versionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.developer != null) {
        if (struct.isSetDeveloper()) {
          oprot.writeFieldBegin(DEVELOPER_FIELD_DESC);
          oprot.writeString(struct.developer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appLanguage != null) {
        if (struct.isSetAppLanguage()) {
          oprot.writeFieldBegin(APP_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.appLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.minSdkVersion != null) {
        if (struct.isSetMinSdkVersion()) {
          oprot.writeFieldBegin(MIN_SDK_VERSION_FIELD_DESC);
          oprot.writeString(struct.minSdkVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppInfoTupleSchemeFactory implements SchemeFactory {
    public AppInfoTupleScheme getScheme() {
      return new AppInfoTupleScheme();
    }
  }

  private static class AppInfoTupleScheme extends TupleScheme<AppInfo> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AppInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPkgName()) {
        optionals.set(0);
      }
      if (struct.isSetAppName()) {
        optionals.set(1);
      }
      if (struct.isSetIconUrl()) {
        optionals.set(2);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(3);
      }
      if (struct.isSetFileSize()) {
        optionals.set(4);
      }
      if (struct.isSetVersionCode()) {
        optionals.set(5);
      }
      if (struct.isSetVersionName()) {
        optionals.set(6);
      }
      if (struct.isSetDeveloper()) {
        optionals.set(7);
      }
      if (struct.isSetAppLanguage()) {
        optionals.set(8);
      }
      if (struct.isSetMinSdkVersion()) {
        optionals.set(9);
      }
      if (struct.isSetDesc()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPkgName()) {
        oprot.writeString(struct.pkgName);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetIconUrl()) {
        oprot.writeString(struct.iconUrl);
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetFileSize()) {
        oprot.writeString(struct.fileSize);
      }
      if (struct.isSetVersionCode()) {
        oprot.writeString(struct.versionCode);
      }
      if (struct.isSetVersionName()) {
        oprot.writeString(struct.versionName);
      }
      if (struct.isSetDeveloper()) {
        oprot.writeString(struct.developer);
      }
      if (struct.isSetAppLanguage()) {
        oprot.writeString(struct.appLanguage);
      }
      if (struct.isSetMinSdkVersion()) {
        oprot.writeString(struct.minSdkVersion);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AppInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.ocean.app.dis.proxy.thrift.entity.AppType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pkgName = iprot.readString();
        struct.setPkgNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.iconUrl = iprot.readString();
        struct.setIconUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileSize = iprot.readString();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.versionCode = iprot.readString();
        struct.setVersionCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionName = iprot.readString();
        struct.setVersionNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.developer = iprot.readString();
        struct.setDeveloperIsSet(true);
      }
      if (incoming.get(8)) {
        struct.appLanguage = iprot.readString();
        struct.setAppLanguageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minSdkVersion = iprot.readString();
        struct.setMinSdkVersionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
    }
  }

}

