/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-12")
public class AppSpaceInfo implements org.apache.thrift.TBase<AppSpaceInfo, AppSpaceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AppSpaceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppSpaceInfo");

  private static final org.apache.thrift.protocol.TField AD_SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adSpaceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPACE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceWidth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SPACE_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceHeight", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppSpaceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppSpaceInfoTupleSchemeFactory());
  }

  public int adSpaceId; // required
  public int appId; // optional
  public int spaceWidth; // required
  public int spaceHeight; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_SPACE_ID((short)1, "adSpaceId"),
    APP_ID((short)2, "appId"),
    SPACE_WIDTH((short)3, "spaceWidth"),
    SPACE_HEIGHT((short)4, "spaceHeight");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_SPACE_ID
          return AD_SPACE_ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // SPACE_WIDTH
          return SPACE_WIDTH;
        case 4: // SPACE_HEIGHT
          return SPACE_HEIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADSPACEID_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private static final int __SPACEWIDTH_ISSET_ID = 2;
  private static final int __SPACEHEIGHT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("adSpaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("spaceWidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("spaceHeight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppSpaceInfo.class, metaDataMap);
  }

  public AppSpaceInfo() {
  }

  public AppSpaceInfo(
    int adSpaceId,
    int spaceWidth,
    int spaceHeight)
  {
    this();
    this.adSpaceId = adSpaceId;
    setAdSpaceIdIsSet(true);
    this.spaceWidth = spaceWidth;
    setSpaceWidthIsSet(true);
    this.spaceHeight = spaceHeight;
    setSpaceHeightIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppSpaceInfo(AppSpaceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adSpaceId = other.adSpaceId;
    this.appId = other.appId;
    this.spaceWidth = other.spaceWidth;
    this.spaceHeight = other.spaceHeight;
  }

  public AppSpaceInfo deepCopy() {
    return new AppSpaceInfo(this);
  }

  
  public void clear() {
    setAdSpaceIdIsSet(false);
    this.adSpaceId = 0;
    setAppIdIsSet(false);
    this.appId = 0;
    setSpaceWidthIsSet(false);
    this.spaceWidth = 0;
    setSpaceHeightIsSet(false);
    this.spaceHeight = 0;
  }

  public int getAdSpaceId() {
    return this.adSpaceId;
  }

  public AppSpaceInfo setAdSpaceId(int adSpaceId) {
    this.adSpaceId = adSpaceId;
    setAdSpaceIdIsSet(true);
    return this;
  }

  public void unsetAdSpaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  /** Returns true if field adSpaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSpaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  public void setAdSpaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSPACEID_ISSET_ID, value);
  }

  public int getAppId() {
    return this.appId;
  }

  public AppSpaceInfo setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getSpaceWidth() {
    return this.spaceWidth;
  }

  public AppSpaceInfo setSpaceWidth(int spaceWidth) {
    this.spaceWidth = spaceWidth;
    setSpaceWidthIsSet(true);
    return this;
  }

  public void unsetSpaceWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID);
  }

  /** Returns true if field spaceWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID);
  }

  public void setSpaceWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEWIDTH_ISSET_ID, value);
  }

  public int getSpaceHeight() {
    return this.spaceHeight;
  }

  public AppSpaceInfo setSpaceHeight(int spaceHeight) {
    this.spaceHeight = spaceHeight;
    setSpaceHeightIsSet(true);
    return this;
  }

  public void unsetSpaceHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID);
  }

  /** Returns true if field spaceHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID);
  }

  public void setSpaceHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEHEIGHT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_SPACE_ID:
      if (value == null) {
        unsetAdSpaceId();
      } else {
        setAdSpaceId((Integer)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case SPACE_WIDTH:
      if (value == null) {
        unsetSpaceWidth();
      } else {
        setSpaceWidth((Integer)value);
      }
      break;

    case SPACE_HEIGHT:
      if (value == null) {
        unsetSpaceHeight();
      } else {
        setSpaceHeight((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_SPACE_ID:
      return Integer.valueOf(getAdSpaceId());

    case APP_ID:
      return Integer.valueOf(getAppId());

    case SPACE_WIDTH:
      return Integer.valueOf(getSpaceWidth());

    case SPACE_HEIGHT:
      return Integer.valueOf(getSpaceHeight());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_SPACE_ID:
      return isSetAdSpaceId();
    case APP_ID:
      return isSetAppId();
    case SPACE_WIDTH:
      return isSetSpaceWidth();
    case SPACE_HEIGHT:
      return isSetSpaceHeight();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppSpaceInfo)
      return this.equals((AppSpaceInfo)that);
    return false;
  }

  public boolean equals(AppSpaceInfo that) {
    if (that == null)
      return false;

    boolean this_present_adSpaceId = true;
    boolean that_present_adSpaceId = true;
    if (this_present_adSpaceId || that_present_adSpaceId) {
      if (!(this_present_adSpaceId && that_present_adSpaceId))
        return false;
      if (this.adSpaceId != that.adSpaceId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_spaceWidth = true;
    boolean that_present_spaceWidth = true;
    if (this_present_spaceWidth || that_present_spaceWidth) {
      if (!(this_present_spaceWidth && that_present_spaceWidth))
        return false;
      if (this.spaceWidth != that.spaceWidth)
        return false;
    }

    boolean this_present_spaceHeight = true;
    boolean that_present_spaceHeight = true;
    if (this_present_spaceHeight || that_present_spaceHeight) {
      if (!(this_present_spaceHeight && that_present_spaceHeight))
        return false;
      if (this.spaceHeight != that.spaceHeight)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adSpaceId = true;
    list.add(present_adSpaceId);
    if (present_adSpaceId)
      list.add(adSpaceId);

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_spaceWidth = true;
    list.add(present_spaceWidth);
    if (present_spaceWidth)
      list.add(spaceWidth);

    boolean present_spaceHeight = true;
    list.add(present_spaceHeight);
    if (present_spaceHeight)
      list.add(spaceHeight);

    return list.hashCode();
  }

  
  public int compareTo(AppSpaceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdSpaceId()).compareTo(other.isSetAdSpaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSpaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSpaceId, other.adSpaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceWidth()).compareTo(other.isSetSpaceWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceWidth, other.spaceWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceHeight()).compareTo(other.isSetSpaceHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceHeight, other.spaceHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AppSpaceInfo(");
    boolean first = true;

    sb.append("adSpaceId:");
    sb.append(this.adSpaceId);
    first = false;
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spaceWidth:");
    sb.append(this.spaceWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceHeight:");
    sb.append(this.spaceHeight);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adSpaceId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spaceWidth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spaceHeight' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppSpaceInfoStandardSchemeFactory implements SchemeFactory {
    public AppSpaceInfoStandardScheme getScheme() {
      return new AppSpaceInfoStandardScheme();
    }
  }

  private static class AppSpaceInfoStandardScheme extends StandardScheme<AppSpaceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppSpaceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSpaceId = iprot.readI32();
              struct.setAdSpaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPACE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceWidth = iprot.readI32();
              struct.setSpaceWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPACE_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceHeight = iprot.readI32();
              struct.setSpaceHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdSpaceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adSpaceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpaceWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceWidth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpaceHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceHeight' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppSpaceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_SPACE_ID_FIELD_DESC);
      oprot.writeI32(struct.adSpaceId);
      oprot.writeFieldEnd();
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPACE_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.spaceWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPACE_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.spaceHeight);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppSpaceInfoTupleSchemeFactory implements SchemeFactory {
    public AppSpaceInfoTupleScheme getScheme() {
      return new AppSpaceInfoTupleScheme();
    }
  }

  private static class AppSpaceInfoTupleScheme extends TupleScheme<AppSpaceInfo> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AppSpaceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.adSpaceId);
      oprot.writeI32(struct.spaceWidth);
      oprot.writeI32(struct.spaceHeight);
      BitSet optionals = new BitSet();
      if (struct.isSetAppId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AppSpaceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adSpaceId = iprot.readI32();
      struct.setAdSpaceIdIsSet(true);
      struct.spaceWidth = iprot.readI32();
      struct.setSpaceWidthIsSet(true);
      struct.spaceHeight = iprot.readI32();
      struct.setSpaceHeightIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
    }
  }

}

