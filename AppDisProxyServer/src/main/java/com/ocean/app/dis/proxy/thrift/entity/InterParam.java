/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-10")
public class InterParam implements org.apache.thrift.TBase<InterParam, InterParam._Fields>, java.io.Serializable, Cloneable, Comparable<InterParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterParam");

  private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOT_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hotWord", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUIRED_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredParam", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PKG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pkgName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InterParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InterParamTupleSchemeFactory());
  }

  public String keyWord; // optional
  public String hotWord; // optional
  public List<ExtData> requiredParam; // optional
  public String pkgName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_WORD((short)1, "keyWord"),
    HOT_WORD((short)2, "hotWord"),
    REQUIRED_PARAM((short)3, "requiredParam"),
    PKG_NAME((short)4, "pkgName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_WORD
          return KEY_WORD;
        case 2: // HOT_WORD
          return HOT_WORD;
        case 3: // REQUIRED_PARAM
          return REQUIRED_PARAM;
        case 4: // PKG_NAME
          return PKG_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KEY_WORD,_Fields.HOT_WORD,_Fields.REQUIRED_PARAM,_Fields.PKG_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOT_WORD, new org.apache.thrift.meta_data.FieldMetaData("hotWord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRED_PARAM, new org.apache.thrift.meta_data.FieldMetaData("requiredParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtData.class))));
    tmpMap.put(_Fields.PKG_NAME, new org.apache.thrift.meta_data.FieldMetaData("pkgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InterParam.class, metaDataMap);
  }

  public InterParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterParam(InterParam other) {
    if (other.isSetKeyWord()) {
      this.keyWord = other.keyWord;
    }
    if (other.isSetHotWord()) {
      this.hotWord = other.hotWord;
    }
    if (other.isSetRequiredParam()) {
      List<ExtData> __this__requiredParam = new ArrayList<ExtData>(other.requiredParam.size());
      for (ExtData other_element : other.requiredParam) {
        __this__requiredParam.add(new ExtData(other_element));
      }
      this.requiredParam = __this__requiredParam;
    }
    if (other.isSetPkgName()) {
      this.pkgName = other.pkgName;
    }
  }

  public InterParam deepCopy() {
    return new InterParam(this);
  }

  
  public void clear() {
    this.keyWord = null;
    this.hotWord = null;
    this.requiredParam = null;
    this.pkgName = null;
  }

  public String getKeyWord() {
    return this.keyWord;
  }

  public InterParam setKeyWord(String keyWord) {
    this.keyWord = keyWord;
    return this;
  }

  public void unsetKeyWord() {
    this.keyWord = null;
  }

  /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyWord() {
    return this.keyWord != null;
  }

  public void setKeyWordIsSet(boolean value) {
    if (!value) {
      this.keyWord = null;
    }
  }

  public String getHotWord() {
    return this.hotWord;
  }

  public InterParam setHotWord(String hotWord) {
    this.hotWord = hotWord;
    return this;
  }

  public void unsetHotWord() {
    this.hotWord = null;
  }

  /** Returns true if field hotWord is set (has been assigned a value) and false otherwise */
  public boolean isSetHotWord() {
    return this.hotWord != null;
  }

  public void setHotWordIsSet(boolean value) {
    if (!value) {
      this.hotWord = null;
    }
  }

  public int getRequiredParamSize() {
    return (this.requiredParam == null) ? 0 : this.requiredParam.size();
  }

  public java.util.Iterator<ExtData> getRequiredParamIterator() {
    return (this.requiredParam == null) ? null : this.requiredParam.iterator();
  }

  public void addToRequiredParam(ExtData elem) {
    if (this.requiredParam == null) {
      this.requiredParam = new ArrayList<ExtData>();
    }
    this.requiredParam.add(elem);
  }

  public List<ExtData> getRequiredParam() {
    return this.requiredParam;
  }

  public InterParam setRequiredParam(List<ExtData> requiredParam) {
    this.requiredParam = requiredParam;
    return this;
  }

  public void unsetRequiredParam() {
    this.requiredParam = null;
  }

  /** Returns true if field requiredParam is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredParam() {
    return this.requiredParam != null;
  }

  public void setRequiredParamIsSet(boolean value) {
    if (!value) {
      this.requiredParam = null;
    }
  }

  public String getPkgName() {
    return this.pkgName;
  }

  public InterParam setPkgName(String pkgName) {
    this.pkgName = pkgName;
    return this;
  }

  public void unsetPkgName() {
    this.pkgName = null;
  }

  /** Returns true if field pkgName is set (has been assigned a value) and false otherwise */
  public boolean isSetPkgName() {
    return this.pkgName != null;
  }

  public void setPkgNameIsSet(boolean value) {
    if (!value) {
      this.pkgName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY_WORD:
      if (value == null) {
        unsetKeyWord();
      } else {
        setKeyWord((String)value);
      }
      break;

    case HOT_WORD:
      if (value == null) {
        unsetHotWord();
      } else {
        setHotWord((String)value);
      }
      break;

    case REQUIRED_PARAM:
      if (value == null) {
        unsetRequiredParam();
      } else {
        setRequiredParam((List<ExtData>)value);
      }
      break;

    case PKG_NAME:
      if (value == null) {
        unsetPkgName();
      } else {
        setPkgName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_WORD:
      return getKeyWord();

    case HOT_WORD:
      return getHotWord();

    case REQUIRED_PARAM:
      return getRequiredParam();

    case PKG_NAME:
      return getPkgName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY_WORD:
      return isSetKeyWord();
    case HOT_WORD:
      return isSetHotWord();
    case REQUIRED_PARAM:
      return isSetRequiredParam();
    case PKG_NAME:
      return isSetPkgName();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InterParam)
      return this.equals((InterParam)that);
    return false;
  }

  public boolean equals(InterParam that) {
    if (that == null)
      return false;

    boolean this_present_keyWord = true && this.isSetKeyWord();
    boolean that_present_keyWord = true && that.isSetKeyWord();
    if (this_present_keyWord || that_present_keyWord) {
      if (!(this_present_keyWord && that_present_keyWord))
        return false;
      if (!this.keyWord.equals(that.keyWord))
        return false;
    }

    boolean this_present_hotWord = true && this.isSetHotWord();
    boolean that_present_hotWord = true && that.isSetHotWord();
    if (this_present_hotWord || that_present_hotWord) {
      if (!(this_present_hotWord && that_present_hotWord))
        return false;
      if (!this.hotWord.equals(that.hotWord))
        return false;
    }

    boolean this_present_requiredParam = true && this.isSetRequiredParam();
    boolean that_present_requiredParam = true && that.isSetRequiredParam();
    if (this_present_requiredParam || that_present_requiredParam) {
      if (!(this_present_requiredParam && that_present_requiredParam))
        return false;
      if (!this.requiredParam.equals(that.requiredParam))
        return false;
    }

    boolean this_present_pkgName = true && this.isSetPkgName();
    boolean that_present_pkgName = true && that.isSetPkgName();
    if (this_present_pkgName || that_present_pkgName) {
      if (!(this_present_pkgName && that_present_pkgName))
        return false;
      if (!this.pkgName.equals(that.pkgName))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_keyWord = true && (isSetKeyWord());
    list.add(present_keyWord);
    if (present_keyWord)
      list.add(keyWord);

    boolean present_hotWord = true && (isSetHotWord());
    list.add(present_hotWord);
    if (present_hotWord)
      list.add(hotWord);

    boolean present_requiredParam = true && (isSetRequiredParam());
    list.add(present_requiredParam);
    if (present_requiredParam)
      list.add(requiredParam);

    boolean present_pkgName = true && (isSetPkgName());
    list.add(present_pkgName);
    if (present_pkgName)
      list.add(pkgName);

    return list.hashCode();
  }

  
  public int compareTo(InterParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, other.keyWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotWord()).compareTo(other.isSetHotWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotWord, other.hotWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiredParam()).compareTo(other.isSetRequiredParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredParam, other.requiredParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPkgName()).compareTo(other.isSetPkgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkgName, other.pkgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("InterParam(");
    boolean first = true;

    if (isSetKeyWord()) {
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
    }
    if (isSetHotWord()) {
      if (!first) sb.append(", ");
      sb.append("hotWord:");
      if (this.hotWord == null) {
        sb.append("null");
      } else {
        sb.append(this.hotWord);
      }
      first = false;
    }
    if (isSetRequiredParam()) {
      if (!first) sb.append(", ");
      sb.append("requiredParam:");
      if (this.requiredParam == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredParam);
      }
      first = false;
    }
    if (isSetPkgName()) {
      if (!first) sb.append(", ");
      sb.append("pkgName:");
      if (this.pkgName == null) {
        sb.append("null");
      } else {
        sb.append(this.pkgName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InterParamStandardSchemeFactory implements SchemeFactory {
    public InterParamStandardScheme getScheme() {
      return new InterParamStandardScheme();
    }
  }

  private static class InterParamStandardScheme extends StandardScheme<InterParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InterParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyWord = iprot.readString();
              struct.setKeyWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOT_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hotWord = iprot.readString();
              struct.setHotWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUIRED_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.requiredParam = new ArrayList<ExtData>(_list60.size);
                ExtData _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = new ExtData();
                  _elem61.read(iprot);
                  struct.requiredParam.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setRequiredParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PKG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkgName = iprot.readString();
              struct.setPkgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InterParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keyWord != null) {
        if (struct.isSetKeyWord()) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hotWord != null) {
        if (struct.isSetHotWord()) {
          oprot.writeFieldBegin(HOT_WORD_FIELD_DESC);
          oprot.writeString(struct.hotWord);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requiredParam != null) {
        if (struct.isSetRequiredParam()) {
          oprot.writeFieldBegin(REQUIRED_PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requiredParam.size()));
            for (ExtData _iter63 : struct.requiredParam)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pkgName != null) {
        if (struct.isSetPkgName()) {
          oprot.writeFieldBegin(PKG_NAME_FIELD_DESC);
          oprot.writeString(struct.pkgName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InterParamTupleSchemeFactory implements SchemeFactory {
    public InterParamTupleScheme getScheme() {
      return new InterParamTupleScheme();
    }
  }

  private static class InterParamTupleScheme extends TupleScheme<InterParam> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, InterParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKeyWord()) {
        optionals.set(0);
      }
      if (struct.isSetHotWord()) {
        optionals.set(1);
      }
      if (struct.isSetRequiredParam()) {
        optionals.set(2);
      }
      if (struct.isSetPkgName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetKeyWord()) {
        oprot.writeString(struct.keyWord);
      }
      if (struct.isSetHotWord()) {
        oprot.writeString(struct.hotWord);
      }
      if (struct.isSetRequiredParam()) {
        {
          oprot.writeI32(struct.requiredParam.size());
          for (ExtData _iter64 : struct.requiredParam)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetPkgName()) {
        oprot.writeString(struct.pkgName);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, InterParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.keyWord = iprot.readString();
        struct.setKeyWordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hotWord = iprot.readString();
        struct.setHotWordIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.requiredParam = new ArrayList<ExtData>(_list65.size);
          ExtData _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new ExtData();
            _elem66.read(iprot);
            struct.requiredParam.add(_elem66);
          }
        }
        struct.setRequiredParamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pkgName = iprot.readString();
        struct.setPkgNameIsSet(true);
      }
    }
  }

}

