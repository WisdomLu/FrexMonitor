/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-18")
public class AppDisRecomReq implements org.apache.thrift.TBase<AppDisRecomReq, AppDisRecomReq._Fields>, java.io.Serializable, Cloneable, Comparable<AppDisRecomReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppDisRecomReq");

  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField APP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("appInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APP_SPACE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("appSpaceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SHIELD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("shieldType", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField JOIN_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("joinSource", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField JOIN_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("joinParam", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField INTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("interType", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField INTER_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("interParam", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppDisRecomReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppDisRecomReqTupleSchemeFactory());
  }

  public UserInfo userInfo; // required
  public AppInfo appInfo; // optional
  public DeviceInfo device; // required
  public String version; // optional
  public AppSpaceInfo appSpaceInfo; // required
  public List<AppType> shieldType; // optional
  public Page page; // optional
  public boolean hasNext; // optional
  /**
   * 
   * @see JoinSource
   */
  public JoinSource joinSource; // optional
  public List<ExtData> joinParam; // optional
  /**
   * 
   * @see InterType
   */
  public InterType interType; // required
  public InterParam interParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_INFO((short)1, "userInfo"),
    APP_INFO((short)2, "appInfo"),
    DEVICE((short)4, "device"),
    VERSION((short)5, "version"),
    APP_SPACE_INFO((short)6, "appSpaceInfo"),
    SHIELD_TYPE((short)7, "shieldType"),
    PAGE((short)8, "page"),
    HAS_NEXT((short)9, "hasNext"),
    /**
     * 
     * @see JoinSource
     */
    JOIN_SOURCE((short)10, "joinSource"),
    JOIN_PARAM((short)11, "joinParam"),
    /**
     * 
     * @see InterType
     */
    INTER_TYPE((short)12, "interType"),
    INTER_PARAM((short)13, "interParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_INFO
          return USER_INFO;
        case 2: // APP_INFO
          return APP_INFO;
        case 4: // DEVICE
          return DEVICE;
        case 5: // VERSION
          return VERSION;
        case 6: // APP_SPACE_INFO
          return APP_SPACE_INFO;
        case 7: // SHIELD_TYPE
          return SHIELD_TYPE;
        case 8: // PAGE
          return PAGE;
        case 9: // HAS_NEXT
          return HAS_NEXT;
        case 10: // JOIN_SOURCE
          return JOIN_SOURCE;
        case 11: // JOIN_PARAM
          return JOIN_PARAM;
        case 12: // INTER_TYPE
          return INTER_TYPE;
        case 13: // INTER_PARAM
          return INTER_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_INFO,_Fields.VERSION,_Fields.SHIELD_TYPE,_Fields.PAGE,_Fields.HAS_NEXT,_Fields.JOIN_SOURCE,_Fields.JOIN_PARAM,_Fields.INTER_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.APP_INFO, new org.apache.thrift.meta_data.FieldMetaData("appInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppInfo.class)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceInfo.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_SPACE_INFO, new org.apache.thrift.meta_data.FieldMetaData("appSpaceInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppSpaceInfo.class)));
    tmpMap.put(_Fields.SHIELD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("shieldType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AppType.class))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOIN_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("joinSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JoinSource.class)));
    tmpMap.put(_Fields.JOIN_PARAM, new org.apache.thrift.meta_data.FieldMetaData("joinParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtData.class))));
    tmpMap.put(_Fields.INTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("interType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InterType.class)));
    tmpMap.put(_Fields.INTER_PARAM, new org.apache.thrift.meta_data.FieldMetaData("interParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppDisRecomReq.class, metaDataMap);
  }

  public AppDisRecomReq() {
    this.hasNext = false;

  }

  public AppDisRecomReq(
    UserInfo userInfo,
    DeviceInfo device,
    AppSpaceInfo appSpaceInfo,
    InterType interType)
  {
    this();
    this.userInfo = userInfo;
    this.device = device;
    this.appSpaceInfo = appSpaceInfo;
    this.interType = interType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppDisRecomReq(AppDisRecomReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserInfo()) {
      this.userInfo = new UserInfo(other.userInfo);
    }
    if (other.isSetAppInfo()) {
      this.appInfo = new AppInfo(other.appInfo);
    }
    if (other.isSetDevice()) {
      this.device = new DeviceInfo(other.device);
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetAppSpaceInfo()) {
      this.appSpaceInfo = new AppSpaceInfo(other.appSpaceInfo);
    }
    if (other.isSetShieldType()) {
      List<AppType> __this__shieldType = new ArrayList<AppType>(other.shieldType.size());
      for (AppType other_element : other.shieldType) {
        __this__shieldType.add(other_element);
      }
      this.shieldType = __this__shieldType;
    }
    if (other.isSetPage()) {
      this.page = new Page(other.page);
    }
    this.hasNext = other.hasNext;
    if (other.isSetJoinSource()) {
      this.joinSource = other.joinSource;
    }
    if (other.isSetJoinParam()) {
      List<ExtData> __this__joinParam = new ArrayList<ExtData>(other.joinParam.size());
      for (ExtData other_element : other.joinParam) {
        __this__joinParam.add(new ExtData(other_element));
      }
      this.joinParam = __this__joinParam;
    }
    if (other.isSetInterType()) {
      this.interType = other.interType;
    }
    if (other.isSetInterParam()) {
      this.interParam = new InterParam(other.interParam);
    }
  }

  public AppDisRecomReq deepCopy() {
    return new AppDisRecomReq(this);
  }

  
  public void clear() {
    this.userInfo = null;
    this.appInfo = null;
    this.device = null;
    this.version = null;
    this.appSpaceInfo = null;
    this.shieldType = null;
    this.page = null;
    this.hasNext = false;

    this.joinSource = null;
    this.joinParam = null;
    this.interType = null;
    this.interParam = null;
  }

  public UserInfo getUserInfo() {
    return this.userInfo;
  }

  public AppDisRecomReq setUserInfo(UserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public AppInfo getAppInfo() {
    return this.appInfo;
  }

  public AppDisRecomReq setAppInfo(AppInfo appInfo) {
    this.appInfo = appInfo;
    return this;
  }

  public void unsetAppInfo() {
    this.appInfo = null;
  }

  /** Returns true if field appInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAppInfo() {
    return this.appInfo != null;
  }

  public void setAppInfoIsSet(boolean value) {
    if (!value) {
      this.appInfo = null;
    }
  }

  public DeviceInfo getDevice() {
    return this.device;
  }

  public AppDisRecomReq setDevice(DeviceInfo device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public AppDisRecomReq setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public AppSpaceInfo getAppSpaceInfo() {
    return this.appSpaceInfo;
  }

  public AppDisRecomReq setAppSpaceInfo(AppSpaceInfo appSpaceInfo) {
    this.appSpaceInfo = appSpaceInfo;
    return this;
  }

  public void unsetAppSpaceInfo() {
    this.appSpaceInfo = null;
  }

  /** Returns true if field appSpaceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAppSpaceInfo() {
    return this.appSpaceInfo != null;
  }

  public void setAppSpaceInfoIsSet(boolean value) {
    if (!value) {
      this.appSpaceInfo = null;
    }
  }

  public int getShieldTypeSize() {
    return (this.shieldType == null) ? 0 : this.shieldType.size();
  }

  public java.util.Iterator<AppType> getShieldTypeIterator() {
    return (this.shieldType == null) ? null : this.shieldType.iterator();
  }

  public void addToShieldType(AppType elem) {
    if (this.shieldType == null) {
      this.shieldType = new ArrayList<AppType>();
    }
    this.shieldType.add(elem);
  }

  public List<AppType> getShieldType() {
    return this.shieldType;
  }

  public AppDisRecomReq setShieldType(List<AppType> shieldType) {
    this.shieldType = shieldType;
    return this;
  }

  public void unsetShieldType() {
    this.shieldType = null;
  }

  /** Returns true if field shieldType is set (has been assigned a value) and false otherwise */
  public boolean isSetShieldType() {
    return this.shieldType != null;
  }

  public void setShieldTypeIsSet(boolean value) {
    if (!value) {
      this.shieldType = null;
    }
  }

  public Page getPage() {
    return this.page;
  }

  public AppDisRecomReq setPage(Page page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public AppDisRecomReq setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  /**
   * 
   * @see JoinSource
   */
  public JoinSource getJoinSource() {
    return this.joinSource;
  }

  /**
   * 
   * @see JoinSource
   */
  public AppDisRecomReq setJoinSource(JoinSource joinSource) {
    this.joinSource = joinSource;
    return this;
  }

  public void unsetJoinSource() {
    this.joinSource = null;
  }

  /** Returns true if field joinSource is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinSource() {
    return this.joinSource != null;
  }

  public void setJoinSourceIsSet(boolean value) {
    if (!value) {
      this.joinSource = null;
    }
  }

  public int getJoinParamSize() {
    return (this.joinParam == null) ? 0 : this.joinParam.size();
  }

  public java.util.Iterator<ExtData> getJoinParamIterator() {
    return (this.joinParam == null) ? null : this.joinParam.iterator();
  }

  public void addToJoinParam(ExtData elem) {
    if (this.joinParam == null) {
      this.joinParam = new ArrayList<ExtData>();
    }
    this.joinParam.add(elem);
  }

  public List<ExtData> getJoinParam() {
    return this.joinParam;
  }

  public AppDisRecomReq setJoinParam(List<ExtData> joinParam) {
    this.joinParam = joinParam;
    return this;
  }

  public void unsetJoinParam() {
    this.joinParam = null;
  }

  /** Returns true if field joinParam is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinParam() {
    return this.joinParam != null;
  }

  public void setJoinParamIsSet(boolean value) {
    if (!value) {
      this.joinParam = null;
    }
  }

  /**
   * 
   * @see InterType
   */
  public InterType getInterType() {
    return this.interType;
  }

  /**
   * 
   * @see InterType
   */
  public AppDisRecomReq setInterType(InterType interType) {
    this.interType = interType;
    return this;
  }

  public void unsetInterType() {
    this.interType = null;
  }

  /** Returns true if field interType is set (has been assigned a value) and false otherwise */
  public boolean isSetInterType() {
    return this.interType != null;
  }

  public void setInterTypeIsSet(boolean value) {
    if (!value) {
      this.interType = null;
    }
  }

  public InterParam getInterParam() {
    return this.interParam;
  }

  public AppDisRecomReq setInterParam(InterParam interParam) {
    this.interParam = interParam;
    return this;
  }

  public void unsetInterParam() {
    this.interParam = null;
  }

  /** Returns true if field interParam is set (has been assigned a value) and false otherwise */
  public boolean isSetInterParam() {
    return this.interParam != null;
  }

  public void setInterParamIsSet(boolean value) {
    if (!value) {
      this.interParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((UserInfo)value);
      }
      break;

    case APP_INFO:
      if (value == null) {
        unsetAppInfo();
      } else {
        setAppInfo((AppInfo)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((DeviceInfo)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case APP_SPACE_INFO:
      if (value == null) {
        unsetAppSpaceInfo();
      } else {
        setAppSpaceInfo((AppSpaceInfo)value);
      }
      break;

    case SHIELD_TYPE:
      if (value == null) {
        unsetShieldType();
      } else {
        setShieldType((List<AppType>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Page)value);
      }
      break;

    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((Boolean)value);
      }
      break;

    case JOIN_SOURCE:
      if (value == null) {
        unsetJoinSource();
      } else {
        setJoinSource((JoinSource)value);
      }
      break;

    case JOIN_PARAM:
      if (value == null) {
        unsetJoinParam();
      } else {
        setJoinParam((List<ExtData>)value);
      }
      break;

    case INTER_TYPE:
      if (value == null) {
        unsetInterType();
      } else {
        setInterType((InterType)value);
      }
      break;

    case INTER_PARAM:
      if (value == null) {
        unsetInterParam();
      } else {
        setInterParam((InterParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_INFO:
      return getUserInfo();

    case APP_INFO:
      return getAppInfo();

    case DEVICE:
      return getDevice();

    case VERSION:
      return getVersion();

    case APP_SPACE_INFO:
      return getAppSpaceInfo();

    case SHIELD_TYPE:
      return getShieldType();

    case PAGE:
      return getPage();

    case HAS_NEXT:
      return Boolean.valueOf(isHasNext());

    case JOIN_SOURCE:
      return getJoinSource();

    case JOIN_PARAM:
      return getJoinParam();

    case INTER_TYPE:
      return getInterType();

    case INTER_PARAM:
      return getInterParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_INFO:
      return isSetUserInfo();
    case APP_INFO:
      return isSetAppInfo();
    case DEVICE:
      return isSetDevice();
    case VERSION:
      return isSetVersion();
    case APP_SPACE_INFO:
      return isSetAppSpaceInfo();
    case SHIELD_TYPE:
      return isSetShieldType();
    case PAGE:
      return isSetPage();
    case HAS_NEXT:
      return isSetHasNext();
    case JOIN_SOURCE:
      return isSetJoinSource();
    case JOIN_PARAM:
      return isSetJoinParam();
    case INTER_TYPE:
      return isSetInterType();
    case INTER_PARAM:
      return isSetInterParam();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppDisRecomReq)
      return this.equals((AppDisRecomReq)that);
    return false;
  }

  public boolean equals(AppDisRecomReq that) {
    if (that == null)
      return false;

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_appInfo = true && this.isSetAppInfo();
    boolean that_present_appInfo = true && that.isSetAppInfo();
    if (this_present_appInfo || that_present_appInfo) {
      if (!(this_present_appInfo && that_present_appInfo))
        return false;
      if (!this.appInfo.equals(that.appInfo))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_appSpaceInfo = true && this.isSetAppSpaceInfo();
    boolean that_present_appSpaceInfo = true && that.isSetAppSpaceInfo();
    if (this_present_appSpaceInfo || that_present_appSpaceInfo) {
      if (!(this_present_appSpaceInfo && that_present_appSpaceInfo))
        return false;
      if (!this.appSpaceInfo.equals(that.appSpaceInfo))
        return false;
    }

    boolean this_present_shieldType = true && this.isSetShieldType();
    boolean that_present_shieldType = true && that.isSetShieldType();
    if (this_present_shieldType || that_present_shieldType) {
      if (!(this_present_shieldType && that_present_shieldType))
        return false;
      if (!this.shieldType.equals(that.shieldType))
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_hasNext = true && this.isSetHasNext();
    boolean that_present_hasNext = true && that.isSetHasNext();
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_joinSource = true && this.isSetJoinSource();
    boolean that_present_joinSource = true && that.isSetJoinSource();
    if (this_present_joinSource || that_present_joinSource) {
      if (!(this_present_joinSource && that_present_joinSource))
        return false;
      if (!this.joinSource.equals(that.joinSource))
        return false;
    }

    boolean this_present_joinParam = true && this.isSetJoinParam();
    boolean that_present_joinParam = true && that.isSetJoinParam();
    if (this_present_joinParam || that_present_joinParam) {
      if (!(this_present_joinParam && that_present_joinParam))
        return false;
      if (!this.joinParam.equals(that.joinParam))
        return false;
    }

    boolean this_present_interType = true && this.isSetInterType();
    boolean that_present_interType = true && that.isSetInterType();
    if (this_present_interType || that_present_interType) {
      if (!(this_present_interType && that_present_interType))
        return false;
      if (!this.interType.equals(that.interType))
        return false;
    }

    boolean this_present_interParam = true && this.isSetInterParam();
    boolean that_present_interParam = true && that.isSetInterParam();
    if (this_present_interParam || that_present_interParam) {
      if (!(this_present_interParam && that_present_interParam))
        return false;
      if (!this.interParam.equals(that.interParam))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userInfo = true && (isSetUserInfo());
    list.add(present_userInfo);
    if (present_userInfo)
      list.add(userInfo);

    boolean present_appInfo = true && (isSetAppInfo());
    list.add(present_appInfo);
    if (present_appInfo)
      list.add(appInfo);

    boolean present_device = true && (isSetDevice());
    list.add(present_device);
    if (present_device)
      list.add(device);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_appSpaceInfo = true && (isSetAppSpaceInfo());
    list.add(present_appSpaceInfo);
    if (present_appSpaceInfo)
      list.add(appSpaceInfo);

    boolean present_shieldType = true && (isSetShieldType());
    list.add(present_shieldType);
    if (present_shieldType)
      list.add(shieldType);

    boolean present_page = true && (isSetPage());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_hasNext = true && (isSetHasNext());
    list.add(present_hasNext);
    if (present_hasNext)
      list.add(hasNext);

    boolean present_joinSource = true && (isSetJoinSource());
    list.add(present_joinSource);
    if (present_joinSource)
      list.add(joinSource.getValue());

    boolean present_joinParam = true && (isSetJoinParam());
    list.add(present_joinParam);
    if (present_joinParam)
      list.add(joinParam);

    boolean present_interType = true && (isSetInterType());
    list.add(present_interType);
    if (present_interType)
      list.add(interType.getValue());

    boolean present_interParam = true && (isSetInterParam());
    list.add(present_interParam);
    if (present_interParam)
      list.add(interParam);

    return list.hashCode();
  }

  
  public int compareTo(AppDisRecomReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppInfo()).compareTo(other.isSetAppInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInfo, other.appInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppSpaceInfo()).compareTo(other.isSetAppSpaceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppSpaceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSpaceInfo, other.appSpaceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShieldType()).compareTo(other.isSetShieldType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShieldType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shieldType, other.shieldType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinSource()).compareTo(other.isSetJoinSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinSource, other.joinSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinParam()).compareTo(other.isSetJoinParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinParam, other.joinParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterType()).compareTo(other.isSetInterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interType, other.interType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterParam()).compareTo(other.isSetInterParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interParam, other.interParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AppDisRecomReq(");
    boolean first = true;

    sb.append("userInfo:");
    if (this.userInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfo);
    }
    first = false;
    if (isSetAppInfo()) {
      if (!first) sb.append(", ");
      sb.append("appInfo:");
      if (this.appInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.appInfo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("device:");
    if (this.device == null) {
      sb.append("null");
    } else {
      sb.append(this.device);
    }
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appSpaceInfo:");
    if (this.appSpaceInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.appSpaceInfo);
    }
    first = false;
    if (isSetShieldType()) {
      if (!first) sb.append(", ");
      sb.append("shieldType:");
      if (this.shieldType == null) {
        sb.append("null");
      } else {
        sb.append(this.shieldType);
      }
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetHasNext()) {
      if (!first) sb.append(", ");
      sb.append("hasNext:");
      sb.append(this.hasNext);
      first = false;
    }
    if (isSetJoinSource()) {
      if (!first) sb.append(", ");
      sb.append("joinSource:");
      if (this.joinSource == null) {
        sb.append("null");
      } else {
        sb.append(this.joinSource);
      }
      first = false;
    }
    if (isSetJoinParam()) {
      if (!first) sb.append(", ");
      sb.append("joinParam:");
      if (this.joinParam == null) {
        sb.append("null");
      } else {
        sb.append(this.joinParam);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("interType:");
    if (this.interType == null) {
      sb.append("null");
    } else {
      sb.append(this.interType);
    }
    first = false;
    if (isSetInterParam()) {
      if (!first) sb.append(", ");
      sb.append("interParam:");
      if (this.interParam == null) {
        sb.append("null");
      } else {
        sb.append(this.interParam);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userInfo' was not present! Struct: " + toString());
    }
    if (device == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'device' was not present! Struct: " + toString());
    }
    if (appSpaceInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appSpaceInfo' was not present! Struct: " + toString());
    }
    if (interType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'interType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (userInfo != null) {
      userInfo.validate();
    }
    if (appInfo != null) {
      appInfo.validate();
    }
    if (device != null) {
      device.validate();
    }
    if (appSpaceInfo != null) {
      appSpaceInfo.validate();
    }
    if (page != null) {
      page.validate();
    }
    if (interParam != null) {
      interParam.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppDisRecomReqStandardSchemeFactory implements SchemeFactory {
    public AppDisRecomReqStandardScheme getScheme() {
      return new AppDisRecomReqStandardScheme();
    }
  }

  private static class AppDisRecomReqStandardScheme extends StandardScheme<AppDisRecomReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppDisRecomReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new UserInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.appInfo = new AppInfo();
              struct.appInfo.read(iprot);
              struct.setAppInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.device = new DeviceInfo();
              struct.device.read(iprot);
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_SPACE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.appSpaceInfo = new AppSpaceInfo();
              struct.appSpaceInfo.read(iprot);
              struct.setAppSpaceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHIELD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.shieldType = new ArrayList<AppType>(_list68.size);
                AppType _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  _elem69 = com.ocean.app.dis.proxy.thrift.entity.AppType.findByValue(iprot.readI32());
                  struct.shieldType.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setShieldTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new Page();
              struct.page.read(iprot);
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JOIN_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.joinSource = com.ocean.app.dis.proxy.thrift.entity.JoinSource.findByValue(iprot.readI32());
              struct.setJoinSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JOIN_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                struct.joinParam = new ArrayList<ExtData>(_list71.size);
                ExtData _elem72;
                for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                {
                  _elem72 = new ExtData();
                  _elem72.read(iprot);
                  struct.joinParam.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setJoinParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interType = com.ocean.app.dis.proxy.thrift.entity.InterType.findByValue(iprot.readI32());
              struct.setInterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INTER_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.interParam = new InterParam();
              struct.interParam.read(iprot);
              struct.setInterParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppDisRecomReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userInfo != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        struct.userInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.appInfo != null) {
        if (struct.isSetAppInfo()) {
          oprot.writeFieldBegin(APP_INFO_FIELD_DESC);
          struct.appInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.device != null) {
        oprot.writeFieldBegin(DEVICE_FIELD_DESC);
        struct.device.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appSpaceInfo != null) {
        oprot.writeFieldBegin(APP_SPACE_INFO_FIELD_DESC);
        struct.appSpaceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.shieldType != null) {
        if (struct.isSetShieldType()) {
          oprot.writeFieldBegin(SHIELD_TYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.shieldType.size()));
            for (AppType _iter74 : struct.shieldType)
            {
              oprot.writeI32(_iter74.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasNext()) {
        oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
        oprot.writeBool(struct.hasNext);
        oprot.writeFieldEnd();
      }
      if (struct.joinSource != null) {
        if (struct.isSetJoinSource()) {
          oprot.writeFieldBegin(JOIN_SOURCE_FIELD_DESC);
          oprot.writeI32(struct.joinSource.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.joinParam != null) {
        if (struct.isSetJoinParam()) {
          oprot.writeFieldBegin(JOIN_PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.joinParam.size()));
            for (ExtData _iter75 : struct.joinParam)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.interType != null) {
        oprot.writeFieldBegin(INTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.interType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.interParam != null) {
        if (struct.isSetInterParam()) {
          oprot.writeFieldBegin(INTER_PARAM_FIELD_DESC);
          struct.interParam.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppDisRecomReqTupleSchemeFactory implements SchemeFactory {
    public AppDisRecomReqTupleScheme getScheme() {
      return new AppDisRecomReqTupleScheme();
    }
  }

  private static class AppDisRecomReqTupleScheme extends TupleScheme<AppDisRecomReq> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AppDisRecomReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.userInfo.write(oprot);
      struct.device.write(oprot);
      struct.appSpaceInfo.write(oprot);
      oprot.writeI32(struct.interType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetAppInfo()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetShieldType()) {
        optionals.set(2);
      }
      if (struct.isSetPage()) {
        optionals.set(3);
      }
      if (struct.isSetHasNext()) {
        optionals.set(4);
      }
      if (struct.isSetJoinSource()) {
        optionals.set(5);
      }
      if (struct.isSetJoinParam()) {
        optionals.set(6);
      }
      if (struct.isSetInterParam()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetAppInfo()) {
        struct.appInfo.write(oprot);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetShieldType()) {
        {
          oprot.writeI32(struct.shieldType.size());
          for (AppType _iter76 : struct.shieldType)
          {
            oprot.writeI32(_iter76.getValue());
          }
        }
      }
      if (struct.isSetPage()) {
        struct.page.write(oprot);
      }
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
      if (struct.isSetJoinSource()) {
        oprot.writeI32(struct.joinSource.getValue());
      }
      if (struct.isSetJoinParam()) {
        {
          oprot.writeI32(struct.joinParam.size());
          for (ExtData _iter77 : struct.joinParam)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetInterParam()) {
        struct.interParam.write(oprot);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AppDisRecomReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userInfo = new UserInfo();
      struct.userInfo.read(iprot);
      struct.setUserInfoIsSet(true);
      struct.device = new DeviceInfo();
      struct.device.read(iprot);
      struct.setDeviceIsSet(true);
      struct.appSpaceInfo = new AppSpaceInfo();
      struct.appSpaceInfo.read(iprot);
      struct.setAppSpaceInfoIsSet(true);
      struct.interType = com.ocean.app.dis.proxy.thrift.entity.InterType.findByValue(iprot.readI32());
      struct.setInterTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.appInfo = new AppInfo();
        struct.appInfo.read(iprot);
        struct.setAppInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.shieldType = new ArrayList<AppType>(_list78.size);
          AppType _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            _elem79 = com.ocean.app.dis.proxy.thrift.entity.AppType.findByValue(iprot.readI32());
            struct.shieldType.add(_elem79);
          }
        }
        struct.setShieldTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.page = new Page();
        struct.page.read(iprot);
        struct.setPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
      if (incoming.get(5)) {
        struct.joinSource = com.ocean.app.dis.proxy.thrift.entity.JoinSource.findByValue(iprot.readI32());
        struct.setJoinSourceIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.joinParam = new ArrayList<ExtData>(_list81.size);
          ExtData _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new ExtData();
            _elem82.read(iprot);
            struct.joinParam.add(_elem82);
          }
        }
        struct.setJoinParamIsSet(true);
      }
      if (incoming.get(7)) {
        struct.interParam = new InterParam();
        struct.interParam.read(iprot);
        struct.setInterParamIsSet(true);
      }
    }
  }

}

