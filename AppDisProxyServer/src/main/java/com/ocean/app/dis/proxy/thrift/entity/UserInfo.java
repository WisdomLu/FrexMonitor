/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-14")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NET_FIELD_DESC = new org.apache.thrift.protocol.TField("net", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UA_FIELD_DESC = new org.apache.thrift.protocol.TField("ua", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAC_FIELD_DESC = new org.apache.thrift.protocol.TField("lac", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public String uid; // required
  public String clientIp; // required
  public String city; // optional
  public String lon; // optional
  public String lat; // optional
  public String net; // optional
  public String ua; // optional
  public int lac; // optional
  public int cid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    CLIENT_IP((short)2, "clientIp"),
    CITY((short)3, "city"),
    LON((short)4, "lon"),
    LAT((short)5, "lat"),
    NET((short)6, "net"),
    UA((short)7, "ua"),
    LAC((short)8, "lac"),
    CID((short)9, "cid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // CLIENT_IP
          return CLIENT_IP;
        case 3: // CITY
          return CITY;
        case 4: // LON
          return LON;
        case 5: // LAT
          return LAT;
        case 6: // NET
          return NET;
        case 7: // UA
          return UA;
        case 8: // LAC
          return LAC;
        case 9: // CID
          return CID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAC_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CITY,_Fields.LON,_Fields.LAT,_Fields.NET,_Fields.UA,_Fields.LAC,_Fields.CID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NET, new org.apache.thrift.meta_data.FieldMetaData("net", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UA, new org.apache.thrift.meta_data.FieldMetaData("ua", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAC, new org.apache.thrift.meta_data.FieldMetaData("lac", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    String uid,
    String clientIp)
  {
    this();
    this.uid = uid;
    this.clientIp = clientIp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetClientIp()) {
      this.clientIp = other.clientIp;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetLon()) {
      this.lon = other.lon;
    }
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetNet()) {
      this.net = other.net;
    }
    if (other.isSetUa()) {
      this.ua = other.ua;
    }
    this.lac = other.lac;
    this.cid = other.cid;
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  
  public void clear() {
    this.uid = null;
    this.clientIp = null;
    this.city = null;
    this.lon = null;
    this.lat = null;
    this.net = null;
    this.ua = null;
    setLacIsSet(false);
    this.lac = 0;
    setCidIsSet(false);
    this.cid = 0;
  }

  public String getUid() {
    return this.uid;
  }

  public UserInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getClientIp() {
    return this.clientIp;
  }

  public UserInfo setClientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  public void unsetClientIp() {
    this.clientIp = null;
  }

  /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIp() {
    return this.clientIp != null;
  }

  public void setClientIpIsSet(boolean value) {
    if (!value) {
      this.clientIp = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public UserInfo setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getLon() {
    return this.lon;
  }

  public UserInfo setLon(String lon) {
    this.lon = lon;
    return this;
  }

  public void unsetLon() {
    this.lon = null;
  }

  /** Returns true if field lon is set (has been assigned a value) and false otherwise */
  public boolean isSetLon() {
    return this.lon != null;
  }

  public void setLonIsSet(boolean value) {
    if (!value) {
      this.lon = null;
    }
  }

  public String getLat() {
    return this.lat;
  }

  public UserInfo setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getNet() {
    return this.net;
  }

  public UserInfo setNet(String net) {
    this.net = net;
    return this;
  }

  public void unsetNet() {
    this.net = null;
  }

  /** Returns true if field net is set (has been assigned a value) and false otherwise */
  public boolean isSetNet() {
    return this.net != null;
  }

  public void setNetIsSet(boolean value) {
    if (!value) {
      this.net = null;
    }
  }

  public String getUa() {
    return this.ua;
  }

  public UserInfo setUa(String ua) {
    this.ua = ua;
    return this;
  }

  public void unsetUa() {
    this.ua = null;
  }

  /** Returns true if field ua is set (has been assigned a value) and false otherwise */
  public boolean isSetUa() {
    return this.ua != null;
  }

  public void setUaIsSet(boolean value) {
    if (!value) {
      this.ua = null;
    }
  }

  public int getLac() {
    return this.lac;
  }

  public UserInfo setLac(int lac) {
    this.lac = lac;
    setLacIsSet(true);
    return this;
  }

  public void unsetLac() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAC_ISSET_ID);
  }

  /** Returns true if field lac is set (has been assigned a value) and false otherwise */
  public boolean isSetLac() {
    return EncodingUtils.testBit(__isset_bitfield, __LAC_ISSET_ID);
  }

  public void setLacIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAC_ISSET_ID, value);
  }

  public int getCid() {
    return this.cid;
  }

  public UserInfo setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClientIp();
      } else {
        setClientIp((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case LON:
      if (value == null) {
        unsetLon();
      } else {
        setLon((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case NET:
      if (value == null) {
        unsetNet();
      } else {
        setNet((String)value);
      }
      break;

    case UA:
      if (value == null) {
        unsetUa();
      } else {
        setUa((String)value);
      }
      break;

    case LAC:
      if (value == null) {
        unsetLac();
      } else {
        setLac((Integer)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case CLIENT_IP:
      return getClientIp();

    case CITY:
      return getCity();

    case LON:
      return getLon();

    case LAT:
      return getLat();

    case NET:
      return getNet();

    case UA:
      return getUa();

    case LAC:
      return Integer.valueOf(getLac());

    case CID:
      return Integer.valueOf(getCid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case CLIENT_IP:
      return isSetClientIp();
    case CITY:
      return isSetCity();
    case LON:
      return isSetLon();
    case LAT:
      return isSetLat();
    case NET:
      return isSetNet();
    case UA:
      return isSetUa();
    case LAC:
      return isSetLac();
    case CID:
      return isSetCid();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_clientIp = true && this.isSetClientIp();
    boolean that_present_clientIp = true && that.isSetClientIp();
    if (this_present_clientIp || that_present_clientIp) {
      if (!(this_present_clientIp && that_present_clientIp))
        return false;
      if (!this.clientIp.equals(that.clientIp))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_lon = true && this.isSetLon();
    boolean that_present_lon = true && that.isSetLon();
    if (this_present_lon || that_present_lon) {
      if (!(this_present_lon && that_present_lon))
        return false;
      if (!this.lon.equals(that.lon))
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_net = true && this.isSetNet();
    boolean that_present_net = true && that.isSetNet();
    if (this_present_net || that_present_net) {
      if (!(this_present_net && that_present_net))
        return false;
      if (!this.net.equals(that.net))
        return false;
    }

    boolean this_present_ua = true && this.isSetUa();
    boolean that_present_ua = true && that.isSetUa();
    if (this_present_ua || that_present_ua) {
      if (!(this_present_ua && that_present_ua))
        return false;
      if (!this.ua.equals(that.ua))
        return false;
    }

    boolean this_present_lac = true && this.isSetLac();
    boolean that_present_lac = true && that.isSetLac();
    if (this_present_lac || that_present_lac) {
      if (!(this_present_lac && that_present_lac))
        return false;
      if (this.lac != that.lac)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_clientIp = true && (isSetClientIp());
    list.add(present_clientIp);
    if (present_clientIp)
      list.add(clientIp);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_lon = true && (isSetLon());
    list.add(present_lon);
    if (present_lon)
      list.add(lon);

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_net = true && (isSetNet());
    list.add(present_net);
    if (present_net)
      list.add(net);

    boolean present_ua = true && (isSetUa());
    list.add(present_ua);
    if (present_ua)
      list.add(ua);

    boolean present_lac = true && (isSetLac());
    list.add(present_lac);
    if (present_lac)
      list.add(lac);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    return list.hashCode();
  }

  
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(other.isSetClientIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, other.clientIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon()).compareTo(other.isSetLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, other.lon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet()).compareTo(other.isSetNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net, other.net);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUa()).compareTo(other.isSetUa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ua, other.ua);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLac()).compareTo(other.isSetLac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lac, other.lac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIp:");
    if (this.clientIp == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIp);
    }
    first = false;
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetLon()) {
      if (!first) sb.append(", ");
      sb.append("lon:");
      if (this.lon == null) {
        sb.append("null");
      } else {
        sb.append(this.lon);
      }
      first = false;
    }
    if (isSetLat()) {
      if (!first) sb.append(", ");
      sb.append("lat:");
      if (this.lat == null) {
        sb.append("null");
      } else {
        sb.append(this.lat);
      }
      first = false;
    }
    if (isSetNet()) {
      if (!first) sb.append(", ");
      sb.append("net:");
      if (this.net == null) {
        sb.append("null");
      } else {
        sb.append(this.net);
      }
      first = false;
    }
    if (isSetUa()) {
      if (!first) sb.append(", ");
      sb.append("ua:");
      if (this.ua == null) {
        sb.append("null");
      } else {
        sb.append(this.ua);
      }
      first = false;
    }
    if (isSetLac()) {
      if (!first) sb.append(", ");
      sb.append("lac:");
      sb.append(this.lac);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (clientIp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientIp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIp = iprot.readString();
              struct.setClientIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lon = iprot.readString();
              struct.setLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.net = iprot.readString();
              struct.setNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ua = iprot.readString();
              struct.setUaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lac = iprot.readI32();
              struct.setLacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.clientIp != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(struct.clientIp);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lon != null) {
        if (struct.isSetLon()) {
          oprot.writeFieldBegin(LON_FIELD_DESC);
          oprot.writeString(struct.lon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lat != null) {
        if (struct.isSetLat()) {
          oprot.writeFieldBegin(LAT_FIELD_DESC);
          oprot.writeString(struct.lat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.net != null) {
        if (struct.isSetNet()) {
          oprot.writeFieldBegin(NET_FIELD_DESC);
          oprot.writeString(struct.net);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ua != null) {
        if (struct.isSetUa()) {
          oprot.writeFieldBegin(UA_FIELD_DESC);
          oprot.writeString(struct.ua);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLac()) {
        oprot.writeFieldBegin(LAC_FIELD_DESC);
        oprot.writeI32(struct.lac);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      oprot.writeString(struct.clientIp);
      BitSet optionals = new BitSet();
      if (struct.isSetCity()) {
        optionals.set(0);
      }
      if (struct.isSetLon()) {
        optionals.set(1);
      }
      if (struct.isSetLat()) {
        optionals.set(2);
      }
      if (struct.isSetNet()) {
        optionals.set(3);
      }
      if (struct.isSetUa()) {
        optionals.set(4);
      }
      if (struct.isSetLac()) {
        optionals.set(5);
      }
      if (struct.isSetCid()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetLon()) {
        oprot.writeString(struct.lon);
      }
      if (struct.isSetLat()) {
        oprot.writeString(struct.lat);
      }
      if (struct.isSetNet()) {
        oprot.writeString(struct.net);
      }
      if (struct.isSetUa()) {
        oprot.writeString(struct.ua);
      }
      if (struct.isSetLac()) {
        oprot.writeI32(struct.lac);
      }
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.clientIp = iprot.readString();
      struct.setClientIpIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lon = iprot.readString();
        struct.setLonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lat = iprot.readString();
        struct.setLatIsSet(true);
      }
      if (incoming.get(3)) {
        struct.net = iprot.readString();
        struct.setNetIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ua = iprot.readString();
        struct.setUaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lac = iprot.readI32();
        struct.setLacIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
    }
  }

}

