/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.app.dis.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-5")
public class AppDisContent implements org.apache.thrift.TBase<AppDisContent, AppDisContent._Fields>, java.io.Serializable, Cloneable, Comparable<AppDisContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppDisContent");

  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("apkId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APK_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("apkMd5", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIGN_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("signMd5", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField APK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("apkUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_DOWNLOAD_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDownloadTimes", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField INSTALLED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("installedCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PUBLIC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField APP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("appInfo", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField IMGLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("imglist", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField JOIN_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("joinSource", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField THIRD_REPORT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdReportParams", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField THIRD_REPORT_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdReportLinks", org.apache.thrift.protocol.TType.MAP, (short)20);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField IS_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("isAd", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PAY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payMode", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppDisContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppDisContentTupleSchemeFactory());
  }

  public long adId; // required
  public String appId; // optional
  public String apkId; // optional
  public String apkMd5; // optional
  public String signMd5; // optional
  public List<String> tags; // optional
  public String apkUrl; // optional
  public long totalDownloadTimes; // optional
  public long installedCount; // optional
  public String categoryId; // optional
  public String categoryName; // optional
  public String publicDate; // optional
  public String updateDate; // optional
  public AppInfo appInfo; // required
  public List<AppImg> imglist; // optional
  public String content; // optional
  /**
   * 
   * @see JoinSource
   */
  public JoinSource joinSource; // optional
  /**
   * 
   * @see ReportType
   */
  public ReportType reportType; // optional
  public Map<String,List<String>> thirdReportParams; // optional
  public Map<String,List<String>> thirdReportLinks; // optional
  public List<ExtData> ext; // optional
  public int isAd; // optional
  public String payMode; // optional
  public String price; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_ID((short)1, "adId"),
    APP_ID((short)2, "appId"),
    APK_ID((short)3, "apkId"),
    APK_MD5((short)4, "apkMd5"),
    SIGN_MD5((short)5, "signMd5"),
    TAGS((short)6, "tags"),
    APK_URL((short)7, "apkUrl"),
    TOTAL_DOWNLOAD_TIMES((short)8, "totalDownloadTimes"),
    INSTALLED_COUNT((short)9, "installedCount"),
    CATEGORY_ID((short)10, "categoryId"),
    CATEGORY_NAME((short)11, "categoryName"),
    PUBLIC_DATE((short)12, "publicDate"),
    UPDATE_DATE((short)13, "updateDate"),
    APP_INFO((short)14, "appInfo"),
    IMGLIST((short)15, "imglist"),
    CONTENT((short)16, "content"),
    /**
     * 
     * @see JoinSource
     */
    JOIN_SOURCE((short)17, "joinSource"),
    /**
     * 
     * @see ReportType
     */
    REPORT_TYPE((short)18, "reportType"),
    THIRD_REPORT_PARAMS((short)19, "thirdReportParams"),
    THIRD_REPORT_LINKS((short)20, "thirdReportLinks"),
    EXT((short)21, "ext"),
    IS_AD((short)22, "isAd"),
    PAY_MODE((short)23, "payMode"),
    PRICE((short)24, "price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_ID
          return AD_ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // APK_ID
          return APK_ID;
        case 4: // APK_MD5
          return APK_MD5;
        case 5: // SIGN_MD5
          return SIGN_MD5;
        case 6: // TAGS
          return TAGS;
        case 7: // APK_URL
          return APK_URL;
        case 8: // TOTAL_DOWNLOAD_TIMES
          return TOTAL_DOWNLOAD_TIMES;
        case 9: // INSTALLED_COUNT
          return INSTALLED_COUNT;
        case 10: // CATEGORY_ID
          return CATEGORY_ID;
        case 11: // CATEGORY_NAME
          return CATEGORY_NAME;
        case 12: // PUBLIC_DATE
          return PUBLIC_DATE;
        case 13: // UPDATE_DATE
          return UPDATE_DATE;
        case 14: // APP_INFO
          return APP_INFO;
        case 15: // IMGLIST
          return IMGLIST;
        case 16: // CONTENT
          return CONTENT;
        case 17: // JOIN_SOURCE
          return JOIN_SOURCE;
        case 18: // REPORT_TYPE
          return REPORT_TYPE;
        case 19: // THIRD_REPORT_PARAMS
          return THIRD_REPORT_PARAMS;
        case 20: // THIRD_REPORT_LINKS
          return THIRD_REPORT_LINKS;
        case 21: // EXT
          return EXT;
        case 22: // IS_AD
          return IS_AD;
        case 23: // PAY_MODE
          return PAY_MODE;
        case 24: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADID_ISSET_ID = 0;
  private static final int __TOTALDOWNLOADTIMES_ISSET_ID = 1;
  private static final int __INSTALLEDCOUNT_ISSET_ID = 2;
  private static final int __ISAD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_ID,_Fields.APK_ID,_Fields.APK_MD5,_Fields.SIGN_MD5,_Fields.TAGS,_Fields.APK_URL,_Fields.TOTAL_DOWNLOAD_TIMES,_Fields.INSTALLED_COUNT,_Fields.CATEGORY_ID,_Fields.CATEGORY_NAME,_Fields.PUBLIC_DATE,_Fields.UPDATE_DATE,_Fields.IMGLIST,_Fields.CONTENT,_Fields.JOIN_SOURCE,_Fields.REPORT_TYPE,_Fields.THIRD_REPORT_PARAMS,_Fields.THIRD_REPORT_LINKS,_Fields.EXT,_Fields.IS_AD,_Fields.PAY_MODE,_Fields.PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APK_ID, new org.apache.thrift.meta_data.FieldMetaData("apkId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APK_MD5, new org.apache.thrift.meta_data.FieldMetaData("apkMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_MD5, new org.apache.thrift.meta_data.FieldMetaData("signMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APK_URL, new org.apache.thrift.meta_data.FieldMetaData("apkUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_DOWNLOAD_TIMES, new org.apache.thrift.meta_data.FieldMetaData("totalDownloadTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSTALLED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("installedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_DATE, new org.apache.thrift.meta_data.FieldMetaData("publicDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_INFO, new org.apache.thrift.meta_data.FieldMetaData("appInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppInfo.class)));
    tmpMap.put(_Fields.IMGLIST, new org.apache.thrift.meta_data.FieldMetaData("imglist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppImg.class))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOIN_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("joinSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JoinSource.class)));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReportType.class)));
    tmpMap.put(_Fields.THIRD_REPORT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("thirdReportParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.THIRD_REPORT_LINKS, new org.apache.thrift.meta_data.FieldMetaData("thirdReportLinks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtData.class))));
    tmpMap.put(_Fields.IS_AD, new org.apache.thrift.meta_data.FieldMetaData("isAd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_MODE, new org.apache.thrift.meta_data.FieldMetaData("payMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppDisContent.class, metaDataMap);
  }

  public AppDisContent() {
    this.reportType = com.ocean.app.dis.proxy.thrift.entity.ReportType.REPORT_GET;

  }

  public AppDisContent(
    long adId,
    AppInfo appInfo)
  {
    this();
    this.adId = adId;
    setAdIdIsSet(true);
    this.appInfo = appInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppDisContent(AppDisContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adId = other.adId;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetApkId()) {
      this.apkId = other.apkId;
    }
    if (other.isSetApkMd5()) {
      this.apkMd5 = other.apkMd5;
    }
    if (other.isSetSignMd5()) {
      this.signMd5 = other.signMd5;
    }
    if (other.isSetTags()) {
      List<String> __this__tags = new ArrayList<String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetApkUrl()) {
      this.apkUrl = other.apkUrl;
    }
    this.totalDownloadTimes = other.totalDownloadTimes;
    this.installedCount = other.installedCount;
    if (other.isSetCategoryId()) {
      this.categoryId = other.categoryId;
    }
    if (other.isSetCategoryName()) {
      this.categoryName = other.categoryName;
    }
    if (other.isSetPublicDate()) {
      this.publicDate = other.publicDate;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetAppInfo()) {
      this.appInfo = new AppInfo(other.appInfo);
    }
    if (other.isSetImglist()) {
      List<AppImg> __this__imglist = new ArrayList<AppImg>(other.imglist.size());
      for (AppImg other_element : other.imglist) {
        __this__imglist.add(new AppImg(other_element));
      }
      this.imglist = __this__imglist;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetJoinSource()) {
      this.joinSource = other.joinSource;
    }
    if (other.isSetReportType()) {
      this.reportType = other.reportType;
    }
    if (other.isSetThirdReportParams()) {
      Map<String,List<String>> __this__thirdReportParams = new HashMap<String,List<String>>(other.thirdReportParams.size());
      for (Map.Entry<String, List<String>> other_element : other.thirdReportParams.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__thirdReportParams_copy_key = other_element_key;

        List<String> __this__thirdReportParams_copy_value = new ArrayList<String>(other_element_value);

        __this__thirdReportParams.put(__this__thirdReportParams_copy_key, __this__thirdReportParams_copy_value);
      }
      this.thirdReportParams = __this__thirdReportParams;
    }
    if (other.isSetThirdReportLinks()) {
      Map<String,List<String>> __this__thirdReportLinks = new HashMap<String,List<String>>(other.thirdReportLinks.size());
      for (Map.Entry<String, List<String>> other_element : other.thirdReportLinks.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__thirdReportLinks_copy_key = other_element_key;

        List<String> __this__thirdReportLinks_copy_value = new ArrayList<String>(other_element_value);

        __this__thirdReportLinks.put(__this__thirdReportLinks_copy_key, __this__thirdReportLinks_copy_value);
      }
      this.thirdReportLinks = __this__thirdReportLinks;
    }
    if (other.isSetExt()) {
      List<ExtData> __this__ext = new ArrayList<ExtData>(other.ext.size());
      for (ExtData other_element : other.ext) {
        __this__ext.add(new ExtData(other_element));
      }
      this.ext = __this__ext;
    }
    this.isAd = other.isAd;
    if (other.isSetPayMode()) {
      this.payMode = other.payMode;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
  }

  public AppDisContent deepCopy() {
    return new AppDisContent(this);
  }

  
  public void clear() {
    setAdIdIsSet(false);
    this.adId = 0;
    this.appId = null;
    this.apkId = null;
    this.apkMd5 = null;
    this.signMd5 = null;
    this.tags = null;
    this.apkUrl = null;
    setTotalDownloadTimesIsSet(false);
    this.totalDownloadTimes = 0;
    setInstalledCountIsSet(false);
    this.installedCount = 0;
    this.categoryId = null;
    this.categoryName = null;
    this.publicDate = null;
    this.updateDate = null;
    this.appInfo = null;
    this.imglist = null;
    this.content = null;
    this.joinSource = null;
    this.reportType = com.ocean.app.dis.proxy.thrift.entity.ReportType.REPORT_GET;

    this.thirdReportParams = null;
    this.thirdReportLinks = null;
    this.ext = null;
    setIsAdIsSet(false);
    this.isAd = 0;
    this.payMode = null;
    this.price = null;
  }

  public long getAdId() {
    return this.adId;
  }

  public AppDisContent setAdId(long adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public String getAppId() {
    return this.appId;
  }

  public AppDisContent setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getApkId() {
    return this.apkId;
  }

  public AppDisContent setApkId(String apkId) {
    this.apkId = apkId;
    return this;
  }

  public void unsetApkId() {
    this.apkId = null;
  }

  /** Returns true if field apkId is set (has been assigned a value) and false otherwise */
  public boolean isSetApkId() {
    return this.apkId != null;
  }

  public void setApkIdIsSet(boolean value) {
    if (!value) {
      this.apkId = null;
    }
  }

  public String getApkMd5() {
    return this.apkMd5;
  }

  public AppDisContent setApkMd5(String apkMd5) {
    this.apkMd5 = apkMd5;
    return this;
  }

  public void unsetApkMd5() {
    this.apkMd5 = null;
  }

  /** Returns true if field apkMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetApkMd5() {
    return this.apkMd5 != null;
  }

  public void setApkMd5IsSet(boolean value) {
    if (!value) {
      this.apkMd5 = null;
    }
  }

  public String getSignMd5() {
    return this.signMd5;
  }

  public AppDisContent setSignMd5(String signMd5) {
    this.signMd5 = signMd5;
    return this;
  }

  public void unsetSignMd5() {
    this.signMd5 = null;
  }

  /** Returns true if field signMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetSignMd5() {
    return this.signMd5 != null;
  }

  public void setSignMd5IsSet(boolean value) {
    if (!value) {
      this.signMd5 = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(elem);
  }

  public List<String> getTags() {
    return this.tags;
  }

  public AppDisContent setTags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getApkUrl() {
    return this.apkUrl;
  }

  public AppDisContent setApkUrl(String apkUrl) {
    this.apkUrl = apkUrl;
    return this;
  }

  public void unsetApkUrl() {
    this.apkUrl = null;
  }

  /** Returns true if field apkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetApkUrl() {
    return this.apkUrl != null;
  }

  public void setApkUrlIsSet(boolean value) {
    if (!value) {
      this.apkUrl = null;
    }
  }

  public long getTotalDownloadTimes() {
    return this.totalDownloadTimes;
  }

  public AppDisContent setTotalDownloadTimes(long totalDownloadTimes) {
    this.totalDownloadTimes = totalDownloadTimes;
    setTotalDownloadTimesIsSet(true);
    return this;
  }

  public void unsetTotalDownloadTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDOWNLOADTIMES_ISSET_ID);
  }

  /** Returns true if field totalDownloadTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDownloadTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDOWNLOADTIMES_ISSET_ID);
  }

  public void setTotalDownloadTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDOWNLOADTIMES_ISSET_ID, value);
  }

  public long getInstalledCount() {
    return this.installedCount;
  }

  public AppDisContent setInstalledCount(long installedCount) {
    this.installedCount = installedCount;
    setInstalledCountIsSet(true);
    return this;
  }

  public void unsetInstalledCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLEDCOUNT_ISSET_ID);
  }

  /** Returns true if field installedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetInstalledCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLEDCOUNT_ISSET_ID);
  }

  public void setInstalledCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLEDCOUNT_ISSET_ID, value);
  }

  public String getCategoryId() {
    return this.categoryId;
  }

  public AppDisContent setCategoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public void unsetCategoryId() {
    this.categoryId = null;
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return this.categoryId != null;
  }

  public void setCategoryIdIsSet(boolean value) {
    if (!value) {
      this.categoryId = null;
    }
  }

  public String getCategoryName() {
    return this.categoryName;
  }

  public AppDisContent setCategoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  public void unsetCategoryName() {
    this.categoryName = null;
  }

  /** Returns true if field categoryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryName() {
    return this.categoryName != null;
  }

  public void setCategoryNameIsSet(boolean value) {
    if (!value) {
      this.categoryName = null;
    }
  }

  public String getPublicDate() {
    return this.publicDate;
  }

  public AppDisContent setPublicDate(String publicDate) {
    this.publicDate = publicDate;
    return this;
  }

  public void unsetPublicDate() {
    this.publicDate = null;
  }

  /** Returns true if field publicDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicDate() {
    return this.publicDate != null;
  }

  public void setPublicDateIsSet(boolean value) {
    if (!value) {
      this.publicDate = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public AppDisContent setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public AppInfo getAppInfo() {
    return this.appInfo;
  }

  public AppDisContent setAppInfo(AppInfo appInfo) {
    this.appInfo = appInfo;
    return this;
  }

  public void unsetAppInfo() {
    this.appInfo = null;
  }

  /** Returns true if field appInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAppInfo() {
    return this.appInfo != null;
  }

  public void setAppInfoIsSet(boolean value) {
    if (!value) {
      this.appInfo = null;
    }
  }

  public int getImglistSize() {
    return (this.imglist == null) ? 0 : this.imglist.size();
  }

  public java.util.Iterator<AppImg> getImglistIterator() {
    return (this.imglist == null) ? null : this.imglist.iterator();
  }

  public void addToImglist(AppImg elem) {
    if (this.imglist == null) {
      this.imglist = new ArrayList<AppImg>();
    }
    this.imglist.add(elem);
  }

  public List<AppImg> getImglist() {
    return this.imglist;
  }

  public AppDisContent setImglist(List<AppImg> imglist) {
    this.imglist = imglist;
    return this;
  }

  public void unsetImglist() {
    this.imglist = null;
  }

  /** Returns true if field imglist is set (has been assigned a value) and false otherwise */
  public boolean isSetImglist() {
    return this.imglist != null;
  }

  public void setImglistIsSet(boolean value) {
    if (!value) {
      this.imglist = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public AppDisContent setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 
   * @see JoinSource
   */
  public JoinSource getJoinSource() {
    return this.joinSource;
  }

  /**
   * 
   * @see JoinSource
   */
  public AppDisContent setJoinSource(JoinSource joinSource) {
    this.joinSource = joinSource;
    return this;
  }

  public void unsetJoinSource() {
    this.joinSource = null;
  }

  /** Returns true if field joinSource is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinSource() {
    return this.joinSource != null;
  }

  public void setJoinSourceIsSet(boolean value) {
    if (!value) {
      this.joinSource = null;
    }
  }

  /**
   * 
   * @see ReportType
   */
  public ReportType getReportType() {
    return this.reportType;
  }

  /**
   * 
   * @see ReportType
   */
  public AppDisContent setReportType(ReportType reportType) {
    this.reportType = reportType;
    return this;
  }

  public void unsetReportType() {
    this.reportType = null;
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return this.reportType != null;
  }

  public void setReportTypeIsSet(boolean value) {
    if (!value) {
      this.reportType = null;
    }
  }

  public int getThirdReportParamsSize() {
    return (this.thirdReportParams == null) ? 0 : this.thirdReportParams.size();
  }

  public void putToThirdReportParams(String key, List<String> val) {
    if (this.thirdReportParams == null) {
      this.thirdReportParams = new HashMap<String,List<String>>();
    }
    this.thirdReportParams.put(key, val);
  }

  public Map<String,List<String>> getThirdReportParams() {
    return this.thirdReportParams;
  }

  public AppDisContent setThirdReportParams(Map<String,List<String>> thirdReportParams) {
    this.thirdReportParams = thirdReportParams;
    return this;
  }

  public void unsetThirdReportParams() {
    this.thirdReportParams = null;
  }

  /** Returns true if field thirdReportParams is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdReportParams() {
    return this.thirdReportParams != null;
  }

  public void setThirdReportParamsIsSet(boolean value) {
    if (!value) {
      this.thirdReportParams = null;
    }
  }

  public int getThirdReportLinksSize() {
    return (this.thirdReportLinks == null) ? 0 : this.thirdReportLinks.size();
  }

  public void putToThirdReportLinks(String key, List<String> val) {
    if (this.thirdReportLinks == null) {
      this.thirdReportLinks = new HashMap<String,List<String>>();
    }
    this.thirdReportLinks.put(key, val);
  }

  public Map<String,List<String>> getThirdReportLinks() {
    return this.thirdReportLinks;
  }

  public AppDisContent setThirdReportLinks(Map<String,List<String>> thirdReportLinks) {
    this.thirdReportLinks = thirdReportLinks;
    return this;
  }

  public void unsetThirdReportLinks() {
    this.thirdReportLinks = null;
  }

  /** Returns true if field thirdReportLinks is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdReportLinks() {
    return this.thirdReportLinks != null;
  }

  public void setThirdReportLinksIsSet(boolean value) {
    if (!value) {
      this.thirdReportLinks = null;
    }
  }

  public int getExtSize() {
    return (this.ext == null) ? 0 : this.ext.size();
  }

  public java.util.Iterator<ExtData> getExtIterator() {
    return (this.ext == null) ? null : this.ext.iterator();
  }

  public void addToExt(ExtData elem) {
    if (this.ext == null) {
      this.ext = new ArrayList<ExtData>();
    }
    this.ext.add(elem);
  }

  public List<ExtData> getExt() {
    return this.ext;
  }

  public AppDisContent setExt(List<ExtData> ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public int getIsAd() {
    return this.isAd;
  }

  public AppDisContent setIsAd(int isAd) {
    this.isAd = isAd;
    setIsAdIsSet(true);
    return this;
  }

  public void unsetIsAd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAD_ISSET_ID);
  }

  /** Returns true if field isAd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAD_ISSET_ID);
  }

  public void setIsAdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAD_ISSET_ID, value);
  }

  public String getPayMode() {
    return this.payMode;
  }

  public AppDisContent setPayMode(String payMode) {
    this.payMode = payMode;
    return this;
  }

  public void unsetPayMode() {
    this.payMode = null;
  }

  /** Returns true if field payMode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMode() {
    return this.payMode != null;
  }

  public void setPayModeIsSet(boolean value) {
    if (!value) {
      this.payMode = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public AppDisContent setPrice(String price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Long)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case APK_ID:
      if (value == null) {
        unsetApkId();
      } else {
        setApkId((String)value);
      }
      break;

    case APK_MD5:
      if (value == null) {
        unsetApkMd5();
      } else {
        setApkMd5((String)value);
      }
      break;

    case SIGN_MD5:
      if (value == null) {
        unsetSignMd5();
      } else {
        setSignMd5((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<String>)value);
      }
      break;

    case APK_URL:
      if (value == null) {
        unsetApkUrl();
      } else {
        setApkUrl((String)value);
      }
      break;

    case TOTAL_DOWNLOAD_TIMES:
      if (value == null) {
        unsetTotalDownloadTimes();
      } else {
        setTotalDownloadTimes((Long)value);
      }
      break;

    case INSTALLED_COUNT:
      if (value == null) {
        unsetInstalledCount();
      } else {
        setInstalledCount((Long)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((String)value);
      }
      break;

    case CATEGORY_NAME:
      if (value == null) {
        unsetCategoryName();
      } else {
        setCategoryName((String)value);
      }
      break;

    case PUBLIC_DATE:
      if (value == null) {
        unsetPublicDate();
      } else {
        setPublicDate((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case APP_INFO:
      if (value == null) {
        unsetAppInfo();
      } else {
        setAppInfo((AppInfo)value);
      }
      break;

    case IMGLIST:
      if (value == null) {
        unsetImglist();
      } else {
        setImglist((List<AppImg>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case JOIN_SOURCE:
      if (value == null) {
        unsetJoinSource();
      } else {
        setJoinSource((JoinSource)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((ReportType)value);
      }
      break;

    case THIRD_REPORT_PARAMS:
      if (value == null) {
        unsetThirdReportParams();
      } else {
        setThirdReportParams((Map<String,List<String>>)value);
      }
      break;

    case THIRD_REPORT_LINKS:
      if (value == null) {
        unsetThirdReportLinks();
      } else {
        setThirdReportLinks((Map<String,List<String>>)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((List<ExtData>)value);
      }
      break;

    case IS_AD:
      if (value == null) {
        unsetIsAd();
      } else {
        setIsAd((Integer)value);
      }
      break;

    case PAY_MODE:
      if (value == null) {
        unsetPayMode();
      } else {
        setPayMode((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_ID:
      return Long.valueOf(getAdId());

    case APP_ID:
      return getAppId();

    case APK_ID:
      return getApkId();

    case APK_MD5:
      return getApkMd5();

    case SIGN_MD5:
      return getSignMd5();

    case TAGS:
      return getTags();

    case APK_URL:
      return getApkUrl();

    case TOTAL_DOWNLOAD_TIMES:
      return Long.valueOf(getTotalDownloadTimes());

    case INSTALLED_COUNT:
      return Long.valueOf(getInstalledCount());

    case CATEGORY_ID:
      return getCategoryId();

    case CATEGORY_NAME:
      return getCategoryName();

    case PUBLIC_DATE:
      return getPublicDate();

    case UPDATE_DATE:
      return getUpdateDate();

    case APP_INFO:
      return getAppInfo();

    case IMGLIST:
      return getImglist();

    case CONTENT:
      return getContent();

    case JOIN_SOURCE:
      return getJoinSource();

    case REPORT_TYPE:
      return getReportType();

    case THIRD_REPORT_PARAMS:
      return getThirdReportParams();

    case THIRD_REPORT_LINKS:
      return getThirdReportLinks();

    case EXT:
      return getExt();

    case IS_AD:
      return Integer.valueOf(getIsAd());

    case PAY_MODE:
      return getPayMode();

    case PRICE:
      return getPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_ID:
      return isSetAdId();
    case APP_ID:
      return isSetAppId();
    case APK_ID:
      return isSetApkId();
    case APK_MD5:
      return isSetApkMd5();
    case SIGN_MD5:
      return isSetSignMd5();
    case TAGS:
      return isSetTags();
    case APK_URL:
      return isSetApkUrl();
    case TOTAL_DOWNLOAD_TIMES:
      return isSetTotalDownloadTimes();
    case INSTALLED_COUNT:
      return isSetInstalledCount();
    case CATEGORY_ID:
      return isSetCategoryId();
    case CATEGORY_NAME:
      return isSetCategoryName();
    case PUBLIC_DATE:
      return isSetPublicDate();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case APP_INFO:
      return isSetAppInfo();
    case IMGLIST:
      return isSetImglist();
    case CONTENT:
      return isSetContent();
    case JOIN_SOURCE:
      return isSetJoinSource();
    case REPORT_TYPE:
      return isSetReportType();
    case THIRD_REPORT_PARAMS:
      return isSetThirdReportParams();
    case THIRD_REPORT_LINKS:
      return isSetThirdReportLinks();
    case EXT:
      return isSetExt();
    case IS_AD:
      return isSetIsAd();
    case PAY_MODE:
      return isSetPayMode();
    case PRICE:
      return isSetPrice();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppDisContent)
      return this.equals((AppDisContent)that);
    return false;
  }

  public boolean equals(AppDisContent that) {
    if (that == null)
      return false;

    boolean this_present_adId = true;
    boolean that_present_adId = true;
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_apkId = true && this.isSetApkId();
    boolean that_present_apkId = true && that.isSetApkId();
    if (this_present_apkId || that_present_apkId) {
      if (!(this_present_apkId && that_present_apkId))
        return false;
      if (!this.apkId.equals(that.apkId))
        return false;
    }

    boolean this_present_apkMd5 = true && this.isSetApkMd5();
    boolean that_present_apkMd5 = true && that.isSetApkMd5();
    if (this_present_apkMd5 || that_present_apkMd5) {
      if (!(this_present_apkMd5 && that_present_apkMd5))
        return false;
      if (!this.apkMd5.equals(that.apkMd5))
        return false;
    }

    boolean this_present_signMd5 = true && this.isSetSignMd5();
    boolean that_present_signMd5 = true && that.isSetSignMd5();
    if (this_present_signMd5 || that_present_signMd5) {
      if (!(this_present_signMd5 && that_present_signMd5))
        return false;
      if (!this.signMd5.equals(that.signMd5))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_apkUrl = true && this.isSetApkUrl();
    boolean that_present_apkUrl = true && that.isSetApkUrl();
    if (this_present_apkUrl || that_present_apkUrl) {
      if (!(this_present_apkUrl && that_present_apkUrl))
        return false;
      if (!this.apkUrl.equals(that.apkUrl))
        return false;
    }

    boolean this_present_totalDownloadTimes = true && this.isSetTotalDownloadTimes();
    boolean that_present_totalDownloadTimes = true && that.isSetTotalDownloadTimes();
    if (this_present_totalDownloadTimes || that_present_totalDownloadTimes) {
      if (!(this_present_totalDownloadTimes && that_present_totalDownloadTimes))
        return false;
      if (this.totalDownloadTimes != that.totalDownloadTimes)
        return false;
    }

    boolean this_present_installedCount = true && this.isSetInstalledCount();
    boolean that_present_installedCount = true && that.isSetInstalledCount();
    if (this_present_installedCount || that_present_installedCount) {
      if (!(this_present_installedCount && that_present_installedCount))
        return false;
      if (this.installedCount != that.installedCount)
        return false;
    }

    boolean this_present_categoryId = true && this.isSetCategoryId();
    boolean that_present_categoryId = true && that.isSetCategoryId();
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (!this.categoryId.equals(that.categoryId))
        return false;
    }

    boolean this_present_categoryName = true && this.isSetCategoryName();
    boolean that_present_categoryName = true && that.isSetCategoryName();
    if (this_present_categoryName || that_present_categoryName) {
      if (!(this_present_categoryName && that_present_categoryName))
        return false;
      if (!this.categoryName.equals(that.categoryName))
        return false;
    }

    boolean this_present_publicDate = true && this.isSetPublicDate();
    boolean that_present_publicDate = true && that.isSetPublicDate();
    if (this_present_publicDate || that_present_publicDate) {
      if (!(this_present_publicDate && that_present_publicDate))
        return false;
      if (!this.publicDate.equals(that.publicDate))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_appInfo = true && this.isSetAppInfo();
    boolean that_present_appInfo = true && that.isSetAppInfo();
    if (this_present_appInfo || that_present_appInfo) {
      if (!(this_present_appInfo && that_present_appInfo))
        return false;
      if (!this.appInfo.equals(that.appInfo))
        return false;
    }

    boolean this_present_imglist = true && this.isSetImglist();
    boolean that_present_imglist = true && that.isSetImglist();
    if (this_present_imglist || that_present_imglist) {
      if (!(this_present_imglist && that_present_imglist))
        return false;
      if (!this.imglist.equals(that.imglist))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_joinSource = true && this.isSetJoinSource();
    boolean that_present_joinSource = true && that.isSetJoinSource();
    if (this_present_joinSource || that_present_joinSource) {
      if (!(this_present_joinSource && that_present_joinSource))
        return false;
      if (!this.joinSource.equals(that.joinSource))
        return false;
    }

    boolean this_present_reportType = true && this.isSetReportType();
    boolean that_present_reportType = true && that.isSetReportType();
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (!this.reportType.equals(that.reportType))
        return false;
    }

    boolean this_present_thirdReportParams = true && this.isSetThirdReportParams();
    boolean that_present_thirdReportParams = true && that.isSetThirdReportParams();
    if (this_present_thirdReportParams || that_present_thirdReportParams) {
      if (!(this_present_thirdReportParams && that_present_thirdReportParams))
        return false;
      if (!this.thirdReportParams.equals(that.thirdReportParams))
        return false;
    }

    boolean this_present_thirdReportLinks = true && this.isSetThirdReportLinks();
    boolean that_present_thirdReportLinks = true && that.isSetThirdReportLinks();
    if (this_present_thirdReportLinks || that_present_thirdReportLinks) {
      if (!(this_present_thirdReportLinks && that_present_thirdReportLinks))
        return false;
      if (!this.thirdReportLinks.equals(that.thirdReportLinks))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_isAd = true && this.isSetIsAd();
    boolean that_present_isAd = true && that.isSetIsAd();
    if (this_present_isAd || that_present_isAd) {
      if (!(this_present_isAd && that_present_isAd))
        return false;
      if (this.isAd != that.isAd)
        return false;
    }

    boolean this_present_payMode = true && this.isSetPayMode();
    boolean that_present_payMode = true && that.isSetPayMode();
    if (this_present_payMode || that_present_payMode) {
      if (!(this_present_payMode && that_present_payMode))
        return false;
      if (!this.payMode.equals(that.payMode))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adId = true;
    list.add(present_adId);
    if (present_adId)
      list.add(adId);

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_apkId = true && (isSetApkId());
    list.add(present_apkId);
    if (present_apkId)
      list.add(apkId);

    boolean present_apkMd5 = true && (isSetApkMd5());
    list.add(present_apkMd5);
    if (present_apkMd5)
      list.add(apkMd5);

    boolean present_signMd5 = true && (isSetSignMd5());
    list.add(present_signMd5);
    if (present_signMd5)
      list.add(signMd5);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_apkUrl = true && (isSetApkUrl());
    list.add(present_apkUrl);
    if (present_apkUrl)
      list.add(apkUrl);

    boolean present_totalDownloadTimes = true && (isSetTotalDownloadTimes());
    list.add(present_totalDownloadTimes);
    if (present_totalDownloadTimes)
      list.add(totalDownloadTimes);

    boolean present_installedCount = true && (isSetInstalledCount());
    list.add(present_installedCount);
    if (present_installedCount)
      list.add(installedCount);

    boolean present_categoryId = true && (isSetCategoryId());
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_categoryName = true && (isSetCategoryName());
    list.add(present_categoryName);
    if (present_categoryName)
      list.add(categoryName);

    boolean present_publicDate = true && (isSetPublicDate());
    list.add(present_publicDate);
    if (present_publicDate)
      list.add(publicDate);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_appInfo = true && (isSetAppInfo());
    list.add(present_appInfo);
    if (present_appInfo)
      list.add(appInfo);

    boolean present_imglist = true && (isSetImglist());
    list.add(present_imglist);
    if (present_imglist)
      list.add(imglist);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_joinSource = true && (isSetJoinSource());
    list.add(present_joinSource);
    if (present_joinSource)
      list.add(joinSource.getValue());

    boolean present_reportType = true && (isSetReportType());
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType.getValue());

    boolean present_thirdReportParams = true && (isSetThirdReportParams());
    list.add(present_thirdReportParams);
    if (present_thirdReportParams)
      list.add(thirdReportParams);

    boolean present_thirdReportLinks = true && (isSetThirdReportLinks());
    list.add(present_thirdReportLinks);
    if (present_thirdReportLinks)
      list.add(thirdReportLinks);

    boolean present_ext = true && (isSetExt());
    list.add(present_ext);
    if (present_ext)
      list.add(ext);

    boolean present_isAd = true && (isSetIsAd());
    list.add(present_isAd);
    if (present_isAd)
      list.add(isAd);

    boolean present_payMode = true && (isSetPayMode());
    list.add(present_payMode);
    if (present_payMode)
      list.add(payMode);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    return list.hashCode();
  }

  
  public int compareTo(AppDisContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApkId()).compareTo(other.isSetApkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkId, other.apkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApkMd5()).compareTo(other.isSetApkMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkMd5, other.apkMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignMd5()).compareTo(other.isSetSignMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signMd5, other.signMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApkUrl()).compareTo(other.isSetApkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkUrl, other.apkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDownloadTimes()).compareTo(other.isSetTotalDownloadTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDownloadTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDownloadTimes, other.totalDownloadTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstalledCount()).compareTo(other.isSetInstalledCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstalledCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installedCount, other.installedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicDate()).compareTo(other.isSetPublicDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicDate, other.publicDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppInfo()).compareTo(other.isSetAppInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInfo, other.appInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImglist()).compareTo(other.isSetImglist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImglist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imglist, other.imglist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinSource()).compareTo(other.isSetJoinSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinSource, other.joinSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdReportParams()).compareTo(other.isSetThirdReportParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdReportParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdReportParams, other.thirdReportParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdReportLinks()).compareTo(other.isSetThirdReportLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdReportLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdReportLinks, other.thirdReportLinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAd()).compareTo(other.isSetIsAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAd, other.isAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMode()).compareTo(other.isSetPayMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMode, other.payMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AppDisContent(");
    boolean first = true;

    sb.append("adId:");
    sb.append(this.adId);
    first = false;
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    if (isSetApkId()) {
      if (!first) sb.append(", ");
      sb.append("apkId:");
      if (this.apkId == null) {
        sb.append("null");
      } else {
        sb.append(this.apkId);
      }
      first = false;
    }
    if (isSetApkMd5()) {
      if (!first) sb.append(", ");
      sb.append("apkMd5:");
      if (this.apkMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.apkMd5);
      }
      first = false;
    }
    if (isSetSignMd5()) {
      if (!first) sb.append(", ");
      sb.append("signMd5:");
      if (this.signMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.signMd5);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetApkUrl()) {
      if (!first) sb.append(", ");
      sb.append("apkUrl:");
      if (this.apkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.apkUrl);
      }
      first = false;
    }
    if (isSetTotalDownloadTimes()) {
      if (!first) sb.append(", ");
      sb.append("totalDownloadTimes:");
      sb.append(this.totalDownloadTimes);
      first = false;
    }
    if (isSetInstalledCount()) {
      if (!first) sb.append(", ");
      sb.append("installedCount:");
      sb.append(this.installedCount);
      first = false;
    }
    if (isSetCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
    }
    if (isSetCategoryName()) {
      if (!first) sb.append(", ");
      sb.append("categoryName:");
      if (this.categoryName == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryName);
      }
      first = false;
    }
    if (isSetPublicDate()) {
      if (!first) sb.append(", ");
      sb.append("publicDate:");
      if (this.publicDate == null) {
        sb.append("null");
      } else {
        sb.append(this.publicDate);
      }
      first = false;
    }
    if (isSetUpdateDate()) {
      if (!first) sb.append(", ");
      sb.append("updateDate:");
      if (this.updateDate == null) {
        sb.append("null");
      } else {
        sb.append(this.updateDate);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appInfo:");
    if (this.appInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.appInfo);
    }
    first = false;
    if (isSetImglist()) {
      if (!first) sb.append(", ");
      sb.append("imglist:");
      if (this.imglist == null) {
        sb.append("null");
      } else {
        sb.append(this.imglist);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetJoinSource()) {
      if (!first) sb.append(", ");
      sb.append("joinSource:");
      if (this.joinSource == null) {
        sb.append("null");
      } else {
        sb.append(this.joinSource);
      }
      first = false;
    }
    if (isSetReportType()) {
      if (!first) sb.append(", ");
      sb.append("reportType:");
      if (this.reportType == null) {
        sb.append("null");
      } else {
        sb.append(this.reportType);
      }
      first = false;
    }
    if (isSetThirdReportParams()) {
      if (!first) sb.append(", ");
      sb.append("thirdReportParams:");
      if (this.thirdReportParams == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdReportParams);
      }
      first = false;
    }
    if (isSetThirdReportLinks()) {
      if (!first) sb.append(", ");
      sb.append("thirdReportLinks:");
      if (this.thirdReportLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdReportLinks);
      }
      first = false;
    }
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    if (isSetIsAd()) {
      if (!first) sb.append(", ");
      sb.append("isAd:");
      sb.append(this.isAd);
      first = false;
    }
    if (isSetPayMode()) {
      if (!first) sb.append(", ");
      sb.append("payMode:");
      if (this.payMode == null) {
        sb.append("null");
      } else {
        sb.append(this.payMode);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      if (this.price == null) {
        sb.append("null");
      } else {
        sb.append(this.price);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
    if (appInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInfo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (appInfo != null) {
      appInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppDisContentStandardSchemeFactory implements SchemeFactory {
    public AppDisContentStandardScheme getScheme() {
      return new AppDisContentStandardScheme();
    }
  }

  private static class AppDisContentStandardScheme extends StandardScheme<AppDisContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppDisContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adId = iprot.readI64();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkId = iprot.readString();
              struct.setApkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APK_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkMd5 = iprot.readString();
              struct.setApkMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGN_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signMd5 = iprot.readString();
              struct.setSignMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.tags.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkUrl = iprot.readString();
              struct.setApkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_DOWNLOAD_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalDownloadTimes = iprot.readI64();
              struct.setTotalDownloadTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTALLED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.installedCount = iprot.readI64();
              struct.setInstalledCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryId = iprot.readString();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CATEGORY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryName = iprot.readString();
              struct.setCategoryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PUBLIC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicDate = iprot.readString();
              struct.setPublicDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.appInfo = new AppInfo();
              struct.appInfo.read(iprot);
              struct.setAppInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IMGLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.imglist = new ArrayList<AppImg>(_list3.size);
                AppImg _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new AppImg();
                  _elem4.read(iprot);
                  struct.imglist.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setImglistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // JOIN_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.joinSource = com.ocean.app.dis.proxy.thrift.entity.JoinSource.findByValue(iprot.readI32());
              struct.setJoinSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportType = com.ocean.app.dis.proxy.thrift.entity.ReportType.findByValue(iprot.readI32());
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // THIRD_REPORT_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.thirdReportParams = new HashMap<String,List<String>>(2*_map6.size);
                String _key7;
                List<String> _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                    _val8 = new ArrayList<String>(_list10.size);
                    String _elem11;
                    for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                    {
                      _elem11 = iprot.readString();
                      _val8.add(_elem11);
                    }
                    iprot.readListEnd();
                  }
                  struct.thirdReportParams.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setThirdReportParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // THIRD_REPORT_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map13.size);
                String _key14;
                List<String> _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                    _val15 = new ArrayList<String>(_list17.size);
                    String _elem18;
                    for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                    {
                      _elem18 = iprot.readString();
                      _val15.add(_elem18);
                    }
                    iprot.readListEnd();
                  }
                  struct.thirdReportLinks.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setThirdReportLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.ext = new ArrayList<ExtData>(_list20.size);
                ExtData _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = new ExtData();
                  _elem21.read(iprot);
                  struct.ext.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAd = iprot.readI32();
              struct.setIsAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PAY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payMode = iprot.readString();
              struct.setPayModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppDisContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI64(struct.adId);
      oprot.writeFieldEnd();
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apkId != null) {
        if (struct.isSetApkId()) {
          oprot.writeFieldBegin(APK_ID_FIELD_DESC);
          oprot.writeString(struct.apkId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apkMd5 != null) {
        if (struct.isSetApkMd5()) {
          oprot.writeFieldBegin(APK_MD5_FIELD_DESC);
          oprot.writeString(struct.apkMd5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.signMd5 != null) {
        if (struct.isSetSignMd5()) {
          oprot.writeFieldBegin(SIGN_MD5_FIELD_DESC);
          oprot.writeString(struct.signMd5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter23 : struct.tags)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.apkUrl != null) {
        if (struct.isSetApkUrl()) {
          oprot.writeFieldBegin(APK_URL_FIELD_DESC);
          oprot.writeString(struct.apkUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalDownloadTimes()) {
        oprot.writeFieldBegin(TOTAL_DOWNLOAD_TIMES_FIELD_DESC);
        oprot.writeI64(struct.totalDownloadTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInstalledCount()) {
        oprot.writeFieldBegin(INSTALLED_COUNT_FIELD_DESC);
        oprot.writeI64(struct.installedCount);
        oprot.writeFieldEnd();
      }
      if (struct.categoryId != null) {
        if (struct.isSetCategoryId()) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.categoryName != null) {
        if (struct.isSetCategoryName()) {
          oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
          oprot.writeString(struct.categoryName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publicDate != null) {
        if (struct.isSetPublicDate()) {
          oprot.writeFieldBegin(PUBLIC_DATE_FIELD_DESC);
          oprot.writeString(struct.publicDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateDate != null) {
        if (struct.isSetUpdateDate()) {
          oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
          oprot.writeString(struct.updateDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appInfo != null) {
        oprot.writeFieldBegin(APP_INFO_FIELD_DESC);
        struct.appInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.imglist != null) {
        if (struct.isSetImglist()) {
          oprot.writeFieldBegin(IMGLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.imglist.size()));
            for (AppImg _iter24 : struct.imglist)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.joinSource != null) {
        if (struct.isSetJoinSource()) {
          oprot.writeFieldBegin(JOIN_SOURCE_FIELD_DESC);
          oprot.writeI32(struct.joinSource.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.reportType != null) {
        if (struct.isSetReportType()) {
          oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.reportType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.thirdReportParams != null) {
        if (struct.isSetThirdReportParams()) {
          oprot.writeFieldBegin(THIRD_REPORT_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.thirdReportParams.size()));
            for (Map.Entry<String, List<String>> _iter25 : struct.thirdReportParams.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter25.getValue().size()));
                for (String _iter26 : _iter25.getValue())
                {
                  oprot.writeString(_iter26);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.thirdReportLinks != null) {
        if (struct.isSetThirdReportLinks()) {
          oprot.writeFieldBegin(THIRD_REPORT_LINKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.thirdReportLinks.size()));
            for (Map.Entry<String, List<String>> _iter27 : struct.thirdReportLinks.entrySet())
            {
              oprot.writeString(_iter27.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter27.getValue().size()));
                for (String _iter28 : _iter27.getValue())
                {
                  oprot.writeString(_iter28);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ext.size()));
            for (ExtData _iter29 : struct.ext)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsAd()) {
        oprot.writeFieldBegin(IS_AD_FIELD_DESC);
        oprot.writeI32(struct.isAd);
        oprot.writeFieldEnd();
      }
      if (struct.payMode != null) {
        if (struct.isSetPayMode()) {
          oprot.writeFieldBegin(PAY_MODE_FIELD_DESC);
          oprot.writeString(struct.payMode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.price != null) {
        if (struct.isSetPrice()) {
          oprot.writeFieldBegin(PRICE_FIELD_DESC);
          oprot.writeString(struct.price);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppDisContentTupleSchemeFactory implements SchemeFactory {
    public AppDisContentTupleScheme getScheme() {
      return new AppDisContentTupleScheme();
    }
  }

  private static class AppDisContentTupleScheme extends TupleScheme<AppDisContent> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AppDisContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.adId);
      struct.appInfo.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetAppId()) {
        optionals.set(0);
      }
      if (struct.isSetApkId()) {
        optionals.set(1);
      }
      if (struct.isSetApkMd5()) {
        optionals.set(2);
      }
      if (struct.isSetSignMd5()) {
        optionals.set(3);
      }
      if (struct.isSetTags()) {
        optionals.set(4);
      }
      if (struct.isSetApkUrl()) {
        optionals.set(5);
      }
      if (struct.isSetTotalDownloadTimes()) {
        optionals.set(6);
      }
      if (struct.isSetInstalledCount()) {
        optionals.set(7);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(8);
      }
      if (struct.isSetCategoryName()) {
        optionals.set(9);
      }
      if (struct.isSetPublicDate()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(11);
      }
      if (struct.isSetImglist()) {
        optionals.set(12);
      }
      if (struct.isSetContent()) {
        optionals.set(13);
      }
      if (struct.isSetJoinSource()) {
        optionals.set(14);
      }
      if (struct.isSetReportType()) {
        optionals.set(15);
      }
      if (struct.isSetThirdReportParams()) {
        optionals.set(16);
      }
      if (struct.isSetThirdReportLinks()) {
        optionals.set(17);
      }
      if (struct.isSetExt()) {
        optionals.set(18);
      }
      if (struct.isSetIsAd()) {
        optionals.set(19);
      }
      if (struct.isSetPayMode()) {
        optionals.set(20);
      }
      if (struct.isSetPrice()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetApkId()) {
        oprot.writeString(struct.apkId);
      }
      if (struct.isSetApkMd5()) {
        oprot.writeString(struct.apkMd5);
      }
      if (struct.isSetSignMd5()) {
        oprot.writeString(struct.signMd5);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter30 : struct.tags)
          {
            oprot.writeString(_iter30);
          }
        }
      }
      if (struct.isSetApkUrl()) {
        oprot.writeString(struct.apkUrl);
      }
      if (struct.isSetTotalDownloadTimes()) {
        oprot.writeI64(struct.totalDownloadTimes);
      }
      if (struct.isSetInstalledCount()) {
        oprot.writeI64(struct.installedCount);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeString(struct.categoryId);
      }
      if (struct.isSetCategoryName()) {
        oprot.writeString(struct.categoryName);
      }
      if (struct.isSetPublicDate()) {
        oprot.writeString(struct.publicDate);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetImglist()) {
        {
          oprot.writeI32(struct.imglist.size());
          for (AppImg _iter31 : struct.imglist)
          {
            _iter31.write(oprot);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetJoinSource()) {
        oprot.writeI32(struct.joinSource.getValue());
      }
      if (struct.isSetReportType()) {
        oprot.writeI32(struct.reportType.getValue());
      }
      if (struct.isSetThirdReportParams()) {
        {
          oprot.writeI32(struct.thirdReportParams.size());
          for (Map.Entry<String, List<String>> _iter32 : struct.thirdReportParams.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            {
              oprot.writeI32(_iter32.getValue().size());
              for (String _iter33 : _iter32.getValue())
              {
                oprot.writeString(_iter33);
              }
            }
          }
        }
      }
      if (struct.isSetThirdReportLinks()) {
        {
          oprot.writeI32(struct.thirdReportLinks.size());
          for (Map.Entry<String, List<String>> _iter34 : struct.thirdReportLinks.entrySet())
          {
            oprot.writeString(_iter34.getKey());
            {
              oprot.writeI32(_iter34.getValue().size());
              for (String _iter35 : _iter34.getValue())
              {
                oprot.writeString(_iter35);
              }
            }
          }
        }
      }
      if (struct.isSetExt()) {
        {
          oprot.writeI32(struct.ext.size());
          for (ExtData _iter36 : struct.ext)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetIsAd()) {
        oprot.writeI32(struct.isAd);
      }
      if (struct.isSetPayMode()) {
        oprot.writeString(struct.payMode);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.price);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AppDisContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adId = iprot.readI64();
      struct.setAdIdIsSet(true);
      struct.appInfo = new AppInfo();
      struct.appInfo.read(iprot);
      struct.setAppInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.apkId = iprot.readString();
        struct.setApkIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.apkMd5 = iprot.readString();
        struct.setApkMd5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.signMd5 = iprot.readString();
        struct.setSignMd5IsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new ArrayList<String>(_list37.size);
          String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.tags.add(_elem38);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.apkUrl = iprot.readString();
        struct.setApkUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalDownloadTimes = iprot.readI64();
        struct.setTotalDownloadTimesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.installedCount = iprot.readI64();
        struct.setInstalledCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.categoryId = iprot.readString();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.categoryName = iprot.readString();
        struct.setCategoryNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.publicDate = iprot.readString();
        struct.setPublicDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list40 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.imglist = new ArrayList<AppImg>(_list40.size);
          AppImg _elem41;
          for (int _i42 = 0; _i42 < _list40.size; ++_i42)
          {
            _elem41 = new AppImg();
            _elem41.read(iprot);
            struct.imglist.add(_elem41);
          }
        }
        struct.setImglistIsSet(true);
      }
      if (incoming.get(13)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(14)) {
        struct.joinSource = com.ocean.app.dis.proxy.thrift.entity.JoinSource.findByValue(iprot.readI32());
        struct.setJoinSourceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reportType = com.ocean.app.dis.proxy.thrift.entity.ReportType.findByValue(iprot.readI32());
        struct.setReportTypeIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map43 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.thirdReportParams = new HashMap<String,List<String>>(2*_map43.size);
          String _key44;
          List<String> _val45;
          for (int _i46 = 0; _i46 < _map43.size; ++_i46)
          {
            _key44 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val45 = new ArrayList<String>(_list47.size);
              String _elem48;
              for (int _i49 = 0; _i49 < _list47.size; ++_i49)
              {
                _elem48 = iprot.readString();
                _val45.add(_elem48);
              }
            }
            struct.thirdReportParams.put(_key44, _val45);
          }
        }
        struct.setThirdReportParamsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map50.size);
          String _key51;
          List<String> _val52;
          for (int _i53 = 0; _i53 < _map50.size; ++_i53)
          {
            _key51 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val52 = new ArrayList<String>(_list54.size);
              String _elem55;
              for (int _i56 = 0; _i56 < _list54.size; ++_i56)
              {
                _elem55 = iprot.readString();
                _val52.add(_elem55);
              }
            }
            struct.thirdReportLinks.put(_key51, _val52);
          }
        }
        struct.setThirdReportLinksIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ext = new ArrayList<ExtData>(_list57.size);
          ExtData _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = new ExtData();
            _elem58.read(iprot);
            struct.ext.add(_elem58);
          }
        }
        struct.setExtIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isAd = iprot.readI32();
        struct.setIsAdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.payMode = iprot.readString();
        struct.setPayModeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.price = iprot.readString();
        struct.setPriceIsSet(true);
      }
    }
  }

}

