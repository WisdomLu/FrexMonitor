/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.lbs.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-11")
public class LBSByIPContent implements org.apache.thrift.TBase<LBSByIPContent, LBSByIPContent._Fields>, java.io.Serializable, Cloneable, Comparable<LBSByIPContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LBSByIPContent");

  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("district", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STREET_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("streetNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LBSByIPContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LBSByIPContentTupleSchemeFactory());
  }

  public String address; // optional
  public String province; // optional
  public String city; // required
  public String cityCode; // optional
  public String district; // optional
  public String street; // optional
  public String streetNo; // optional
  public String lat; // required
  public String lng; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS((short)1, "address"),
    PROVINCE((short)2, "province"),
    CITY((short)3, "city"),
    CITY_CODE((short)4, "cityCode"),
    DISTRICT((short)5, "district"),
    STREET((short)6, "street"),
    STREET_NO((short)7, "streetNo"),
    LAT((short)8, "lat"),
    LNG((short)9, "lng");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS
          return ADDRESS;
        case 2: // PROVINCE
          return PROVINCE;
        case 3: // CITY
          return CITY;
        case 4: // CITY_CODE
          return CITY_CODE;
        case 5: // DISTRICT
          return DISTRICT;
        case 6: // STREET
          return STREET;
        case 7: // STREET_NO
          return STREET_NO;
        case 8: // LAT
          return LAT;
        case 9: // LNG
          return LNG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDRESS,_Fields.PROVINCE,_Fields.CITY_CODE,_Fields.DISTRICT,_Fields.STREET,_Fields.STREET_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRICT, new org.apache.thrift.meta_data.FieldMetaData("district", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET_NO, new org.apache.thrift.meta_data.FieldMetaData("streetNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LBSByIPContent.class, metaDataMap);
  }

  public LBSByIPContent() {
  }

  public LBSByIPContent(
    String city,
    String lat,
    String lng)
  {
    this();
    this.city = city;
    this.lat = lat;
    this.lng = lng;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LBSByIPContent(LBSByIPContent other) {
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetDistrict()) {
      this.district = other.district;
    }
    if (other.isSetStreet()) {
      this.street = other.street;
    }
    if (other.isSetStreetNo()) {
      this.streetNo = other.streetNo;
    }
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetLng()) {
      this.lng = other.lng;
    }
  }

  public LBSByIPContent deepCopy() {
    return new LBSByIPContent(this);
  }

  
  public void clear() {
    this.address = null;
    this.province = null;
    this.city = null;
    this.cityCode = null;
    this.district = null;
    this.street = null;
    this.streetNo = null;
    this.lat = null;
    this.lng = null;
  }

  public String getAddress() {
    return this.address;
  }

  public LBSByIPContent setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public LBSByIPContent setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public LBSByIPContent setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public LBSByIPContent setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public String getDistrict() {
    return this.district;
  }

  public LBSByIPContent setDistrict(String district) {
    this.district = district;
    return this;
  }

  public void unsetDistrict() {
    this.district = null;
  }

  /** Returns true if field district is set (has been assigned a value) and false otherwise */
  public boolean isSetDistrict() {
    return this.district != null;
  }

  public void setDistrictIsSet(boolean value) {
    if (!value) {
      this.district = null;
    }
  }

  public String getStreet() {
    return this.street;
  }

  public LBSByIPContent setStreet(String street) {
    this.street = street;
    return this;
  }

  public void unsetStreet() {
    this.street = null;
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return this.street != null;
  }

  public void setStreetIsSet(boolean value) {
    if (!value) {
      this.street = null;
    }
  }

  public String getStreetNo() {
    return this.streetNo;
  }

  public LBSByIPContent setStreetNo(String streetNo) {
    this.streetNo = streetNo;
    return this;
  }

  public void unsetStreetNo() {
    this.streetNo = null;
  }

  /** Returns true if field streetNo is set (has been assigned a value) and false otherwise */
  public boolean isSetStreetNo() {
    return this.streetNo != null;
  }

  public void setStreetNoIsSet(boolean value) {
    if (!value) {
      this.streetNo = null;
    }
  }

  public String getLat() {
    return this.lat;
  }

  public LBSByIPContent setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getLng() {
    return this.lng;
  }

  public LBSByIPContent setLng(String lng) {
    this.lng = lng;
    return this;
  }

  public void unsetLng() {
    this.lng = null;
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return this.lng != null;
  }

  public void setLngIsSet(boolean value) {
    if (!value) {
      this.lng = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case DISTRICT:
      if (value == null) {
        unsetDistrict();
      } else {
        setDistrict((String)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((String)value);
      }
      break;

    case STREET_NO:
      if (value == null) {
        unsetStreetNo();
      } else {
        setStreetNo((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS:
      return getAddress();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case CITY_CODE:
      return getCityCode();

    case DISTRICT:
      return getDistrict();

    case STREET:
      return getStreet();

    case STREET_NO:
      return getStreetNo();

    case LAT:
      return getLat();

    case LNG:
      return getLng();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS:
      return isSetAddress();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case CITY_CODE:
      return isSetCityCode();
    case DISTRICT:
      return isSetDistrict();
    case STREET:
      return isSetStreet();
    case STREET_NO:
      return isSetStreetNo();
    case LAT:
      return isSetLat();
    case LNG:
      return isSetLng();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LBSByIPContent)
      return this.equals((LBSByIPContent)that);
    return false;
  }

  public boolean equals(LBSByIPContent that) {
    if (that == null)
      return false;

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_district = true && this.isSetDistrict();
    boolean that_present_district = true && that.isSetDistrict();
    if (this_present_district || that_present_district) {
      if (!(this_present_district && that_present_district))
        return false;
      if (!this.district.equals(that.district))
        return false;
    }

    boolean this_present_street = true && this.isSetStreet();
    boolean that_present_street = true && that.isSetStreet();
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (!this.street.equals(that.street))
        return false;
    }

    boolean this_present_streetNo = true && this.isSetStreetNo();
    boolean that_present_streetNo = true && that.isSetStreetNo();
    if (this_present_streetNo || that_present_streetNo) {
      if (!(this_present_streetNo && that_present_streetNo))
        return false;
      if (!this.streetNo.equals(that.streetNo))
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_lng = true && this.isSetLng();
    boolean that_present_lng = true && that.isSetLng();
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (!this.lng.equals(that.lng))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_province = true && (isSetProvince());
    list.add(present_province);
    if (present_province)
      list.add(province);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_cityCode = true && (isSetCityCode());
    list.add(present_cityCode);
    if (present_cityCode)
      list.add(cityCode);

    boolean present_district = true && (isSetDistrict());
    list.add(present_district);
    if (present_district)
      list.add(district);

    boolean present_street = true && (isSetStreet());
    list.add(present_street);
    if (present_street)
      list.add(street);

    boolean present_streetNo = true && (isSetStreetNo());
    list.add(present_streetNo);
    if (present_streetNo)
      list.add(streetNo);

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_lng = true && (isSetLng());
    list.add(present_lng);
    if (present_lng)
      list.add(lng);

    return list.hashCode();
  }

  
  public int compareTo(LBSByIPContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistrict()).compareTo(other.isSetDistrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.district, other.district);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreet()).compareTo(other.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, other.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreetNo()).compareTo(other.isSetStreetNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreetNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetNo, other.streetNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(other.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, other.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("LBSByIPContent(");
    boolean first = true;

    if (isSetAddress()) {
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetProvince()) {
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (isSetCityCode()) {
      if (!first) sb.append(", ");
      sb.append("cityCode:");
      if (this.cityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.cityCode);
      }
      first = false;
    }
    if (isSetDistrict()) {
      if (!first) sb.append(", ");
      sb.append("district:");
      if (this.district == null) {
        sb.append("null");
      } else {
        sb.append(this.district);
      }
      first = false;
    }
    if (isSetStreet()) {
      if (!first) sb.append(", ");
      sb.append("street:");
      if (this.street == null) {
        sb.append("null");
      } else {
        sb.append(this.street);
      }
      first = false;
    }
    if (isSetStreetNo()) {
      if (!first) sb.append(", ");
      sb.append("streetNo:");
      if (this.streetNo == null) {
        sb.append("null");
      } else {
        sb.append(this.streetNo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("lat:");
    if (this.lat == null) {
      sb.append("null");
    } else {
      sb.append(this.lat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    if (this.lng == null) {
      sb.append("null");
    } else {
      sb.append(this.lng);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    if (lat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lat' was not present! Struct: " + toString());
    }
    if (lng == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lng' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LBSByIPContentStandardSchemeFactory implements SchemeFactory {
    public LBSByIPContentStandardScheme getScheme() {
      return new LBSByIPContentStandardScheme();
    }
  }

  private static class LBSByIPContentStandardScheme extends StandardScheme<LBSByIPContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LBSByIPContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISTRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.district = iprot.readString();
              struct.setDistrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.street = iprot.readString();
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STREET_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streetNo = iprot.readString();
              struct.setStreetNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lng = iprot.readString();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LBSByIPContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.province != null) {
        if (struct.isSetProvince()) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        if (struct.isSetCityCode()) {
          oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
          oprot.writeString(struct.cityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.district != null) {
        if (struct.isSetDistrict()) {
          oprot.writeFieldBegin(DISTRICT_FIELD_DESC);
          oprot.writeString(struct.district);
          oprot.writeFieldEnd();
        }
      }
      if (struct.street != null) {
        if (struct.isSetStreet()) {
          oprot.writeFieldBegin(STREET_FIELD_DESC);
          oprot.writeString(struct.street);
          oprot.writeFieldEnd();
        }
      }
      if (struct.streetNo != null) {
        if (struct.isSetStreetNo()) {
          oprot.writeFieldBegin(STREET_NO_FIELD_DESC);
          oprot.writeString(struct.streetNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lat != null) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeString(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.lng != null) {
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeString(struct.lng);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LBSByIPContentTupleSchemeFactory implements SchemeFactory {
    public LBSByIPContentTupleScheme getScheme() {
      return new LBSByIPContentTupleScheme();
    }
  }

  private static class LBSByIPContentTupleScheme extends TupleScheme<LBSByIPContent> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, LBSByIPContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.city);
      oprot.writeString(struct.lat);
      oprot.writeString(struct.lng);
      BitSet optionals = new BitSet();
      if (struct.isSetAddress()) {
        optionals.set(0);
      }
      if (struct.isSetProvince()) {
        optionals.set(1);
      }
      if (struct.isSetCityCode()) {
        optionals.set(2);
      }
      if (struct.isSetDistrict()) {
        optionals.set(3);
      }
      if (struct.isSetStreet()) {
        optionals.set(4);
      }
      if (struct.isSetStreetNo()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetDistrict()) {
        oprot.writeString(struct.district);
      }
      if (struct.isSetStreet()) {
        oprot.writeString(struct.street);
      }
      if (struct.isSetStreetNo()) {
        oprot.writeString(struct.streetNo);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, LBSByIPContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.lat = iprot.readString();
      struct.setLatIsSet(true);
      struct.lng = iprot.readString();
      struct.setLngIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.district = iprot.readString();
        struct.setDistrictIsSet(true);
      }
      if (incoming.get(4)) {
        struct.street = iprot.readString();
        struct.setStreetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.streetNo = iprot.readString();
        struct.setStreetNoIsSet(true);
      }
    }
  }

}

