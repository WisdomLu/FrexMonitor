/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.lbs.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-8-11")
public class LBSByAddressContent implements org.apache.thrift.TBase<LBSByAddressContent, LBSByAddressContent._Fields>, java.io.Serializable, Cloneable, Comparable<LBSByAddressContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LBSByAddressContent");

  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LBSByAddressContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LBSByAddressContentTupleSchemeFactory());
  }

  public String lat; // required
  public String lng; // required
  public String level; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAT((short)1, "lat"),
    LNG((short)2, "lng"),
    LEVEL((short)3, "level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAT
          return LAT;
        case 2: // LNG
          return LNG;
        case 3: // LEVEL
          return LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LBSByAddressContent.class, metaDataMap);
  }

  public LBSByAddressContent() {
  }

  public LBSByAddressContent(
    String lat,
    String lng)
  {
    this();
    this.lat = lat;
    this.lng = lng;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LBSByAddressContent(LBSByAddressContent other) {
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetLng()) {
      this.lng = other.lng;
    }
    if (other.isSetLevel()) {
      this.level = other.level;
    }
  }

  public LBSByAddressContent deepCopy() {
    return new LBSByAddressContent(this);
  }

  
  public void clear() {
    this.lat = null;
    this.lng = null;
    this.level = null;
  }

  public String getLat() {
    return this.lat;
  }

  public LBSByAddressContent setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getLng() {
    return this.lng;
  }

  public LBSByAddressContent setLng(String lng) {
    this.lng = lng;
    return this;
  }

  public void unsetLng() {
    this.lng = null;
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return this.lng != null;
  }

  public void setLngIsSet(boolean value) {
    if (!value) {
      this.lng = null;
    }
  }

  public String getLevel() {
    return this.level;
  }

  public LBSByAddressContent setLevel(String level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAT:
      return getLat();

    case LNG:
      return getLng();

    case LEVEL:
      return getLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAT:
      return isSetLat();
    case LNG:
      return isSetLng();
    case LEVEL:
      return isSetLevel();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LBSByAddressContent)
      return this.equals((LBSByAddressContent)that);
    return false;
  }

  public boolean equals(LBSByAddressContent that) {
    if (that == null)
      return false;

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_lng = true && this.isSetLng();
    boolean that_present_lng = true && that.isSetLng();
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (!this.lng.equals(that.lng))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_lng = true && (isSetLng());
    list.add(present_lng);
    if (present_lng)
      list.add(lng);

    boolean present_level = true && (isSetLevel());
    list.add(present_level);
    if (present_level)
      list.add(level);

    return list.hashCode();
  }

  
  public int compareTo(LBSByAddressContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(other.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, other.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("LBSByAddressContent(");
    boolean first = true;

    sb.append("lat:");
    if (this.lat == null) {
      sb.append("null");
    } else {
      sb.append(this.lat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    if (this.lng == null) {
      sb.append("null");
    } else {
      sb.append(this.lng);
    }
    first = false;
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lat' was not present! Struct: " + toString());
    }
    if (lng == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lng' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LBSByAddressContentStandardSchemeFactory implements SchemeFactory {
    public LBSByAddressContentStandardScheme getScheme() {
      return new LBSByAddressContentStandardScheme();
    }
  }

  private static class LBSByAddressContentStandardScheme extends StandardScheme<LBSByAddressContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LBSByAddressContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lng = iprot.readString();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.level = iprot.readString();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LBSByAddressContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lat != null) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeString(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.lng != null) {
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeString(struct.lng);
        oprot.writeFieldEnd();
      }
      if (struct.level != null) {
        if (struct.isSetLevel()) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LBSByAddressContentTupleSchemeFactory implements SchemeFactory {
    public LBSByAddressContentTupleScheme getScheme() {
      return new LBSByAddressContentTupleScheme();
    }
  }

  private static class LBSByAddressContentTupleScheme extends TupleScheme<LBSByAddressContent> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, LBSByAddressContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.lat);
      oprot.writeString(struct.lng);
      BitSet optionals = new BitSet();
      if (struct.isSetLevel()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetLevel()) {
        oprot.writeString(struct.level);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, LBSByAddressContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lat = iprot.readString();
      struct.setLatIsSet(true);
      struct.lng = iprot.readString();
      struct.setLngIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.level = iprot.readString();
        struct.setLevelIsSet(true);
      }
    }
  }

}

