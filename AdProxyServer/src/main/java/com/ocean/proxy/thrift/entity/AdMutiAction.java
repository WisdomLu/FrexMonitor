/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-4-13")
public class AdMutiAction implements org.apache.thrift.TBase<AdMutiAction, AdMutiAction._Fields>, java.io.Serializable, Cloneable, Comparable<AdMutiAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdMutiAction");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GUIDE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("guideTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUTTON_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buttonName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINKURL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkurl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CP_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpAuthor", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cpVersion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CP_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpLanguage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CP_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpPackage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CP_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("cpIcon", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CP_APK_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApk", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CP_MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpMemo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CP_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpImgs", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CPCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpclass", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TURN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("turn_type", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PARAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("param_type", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField THIRD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("third_url", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LINKURL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkurl_type", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ACTIVE_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("activeUri", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SCREEN_ON_ACT_FIELD_DESC = new org.apache.thrift.protocol.TField("screenOnAct", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SILENT_INSTALL_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("silentInstallRate", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ACTIVE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRate", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField CLICK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("clickRate", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField CP_APK_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApkMd5", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CP_APK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApkSize", org.apache.thrift.protocol.TType.I64, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdMutiActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdMutiActionTupleSchemeFactory());
  }

  public int type; // required
  public String guideTitle; // optional
  public String buttonName; // optional
  public String linkurl; // optional
  public String phone; // optional
  public String cpName; // optional
  public String cpAuthor; // optional
  public String cpVersion; // optional
  public String cpLanguage; // optional
  public String cpPackage; // optional
  public String cpIcon; // optional
  public String cpApk; // optional
  public String cpMemo; // optional
  public List<String> cpImgs; // optional
  public String cpclass; // optional
  public int turn_type; // optional
  public int param_type; // optional
  public String action; // optional
  public String third_url; // optional
  public int linkurl_type; // optional
  public String activeUri; // optional
  public int screenOnAct; // optional
  public int silentInstallRate; // optional
  public int activeRate; // optional
  public int clickRate; // optional
  public String cpApkMd5; // optional
  public long cpApkSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    GUIDE_TITLE((short)2, "guideTitle"),
    BUTTON_NAME((short)3, "buttonName"),
    LINKURL((short)4, "linkurl"),
    PHONE((short)5, "phone"),
    CP_NAME((short)6, "cpName"),
    CP_AUTHOR((short)7, "cpAuthor"),
    CP_VERSION((short)8, "cpVersion"),
    CP_LANGUAGE((short)9, "cpLanguage"),
    CP_PACKAGE((short)10, "cpPackage"),
    CP_ICON((short)11, "cpIcon"),
    CP_APK((short)12, "cpApk"),
    CP_MEMO((short)13, "cpMemo"),
    CP_IMGS((short)14, "cpImgs"),
    CPCLASS((short)15, "cpclass"),
    TURN_TYPE((short)16, "turn_type"),
    PARAM_TYPE((short)17, "param_type"),
    ACTION((short)18, "action"),
    THIRD_URL((short)19, "third_url"),
    LINKURL_TYPE((short)20, "linkurl_type"),
    ACTIVE_URI((short)21, "activeUri"),
    SCREEN_ON_ACT((short)22, "screenOnAct"),
    SILENT_INSTALL_RATE((short)23, "silentInstallRate"),
    ACTIVE_RATE((short)24, "activeRate"),
    CLICK_RATE((short)25, "clickRate"),
    CP_APK_MD5((short)26, "cpApkMd5"),
    CP_APK_SIZE((short)27, "cpApkSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // GUIDE_TITLE
          return GUIDE_TITLE;
        case 3: // BUTTON_NAME
          return BUTTON_NAME;
        case 4: // LINKURL
          return LINKURL;
        case 5: // PHONE
          return PHONE;
        case 6: // CP_NAME
          return CP_NAME;
        case 7: // CP_AUTHOR
          return CP_AUTHOR;
        case 8: // CP_VERSION
          return CP_VERSION;
        case 9: // CP_LANGUAGE
          return CP_LANGUAGE;
        case 10: // CP_PACKAGE
          return CP_PACKAGE;
        case 11: // CP_ICON
          return CP_ICON;
        case 12: // CP_APK
          return CP_APK;
        case 13: // CP_MEMO
          return CP_MEMO;
        case 14: // CP_IMGS
          return CP_IMGS;
        case 15: // CPCLASS
          return CPCLASS;
        case 16: // TURN_TYPE
          return TURN_TYPE;
        case 17: // PARAM_TYPE
          return PARAM_TYPE;
        case 18: // ACTION
          return ACTION;
        case 19: // THIRD_URL
          return THIRD_URL;
        case 20: // LINKURL_TYPE
          return LINKURL_TYPE;
        case 21: // ACTIVE_URI
          return ACTIVE_URI;
        case 22: // SCREEN_ON_ACT
          return SCREEN_ON_ACT;
        case 23: // SILENT_INSTALL_RATE
          return SILENT_INSTALL_RATE;
        case 24: // ACTIVE_RATE
          return ACTIVE_RATE;
        case 25: // CLICK_RATE
          return CLICK_RATE;
        case 26: // CP_APK_MD5
          return CP_APK_MD5;
        case 27: // CP_APK_SIZE
          return CP_APK_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __TURN_TYPE_ISSET_ID = 1;
  private static final int __PARAM_TYPE_ISSET_ID = 2;
  private static final int __LINKURL_TYPE_ISSET_ID = 3;
  private static final int __SCREENONACT_ISSET_ID = 4;
  private static final int __SILENTINSTALLRATE_ISSET_ID = 5;
  private static final int __ACTIVERATE_ISSET_ID = 6;
  private static final int __CLICKRATE_ISSET_ID = 7;
  private static final int __CPAPKSIZE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GUIDE_TITLE,_Fields.BUTTON_NAME,_Fields.LINKURL,_Fields.PHONE,_Fields.CP_NAME,_Fields.CP_AUTHOR,_Fields.CP_VERSION,_Fields.CP_LANGUAGE,_Fields.CP_PACKAGE,_Fields.CP_ICON,_Fields.CP_APK,_Fields.CP_MEMO,_Fields.CP_IMGS,_Fields.CPCLASS,_Fields.TURN_TYPE,_Fields.PARAM_TYPE,_Fields.ACTION,_Fields.THIRD_URL,_Fields.LINKURL_TYPE,_Fields.ACTIVE_URI,_Fields.SCREEN_ON_ACT,_Fields.SILENT_INSTALL_RATE,_Fields.ACTIVE_RATE,_Fields.CLICK_RATE,_Fields.CP_APK_MD5,_Fields.CP_APK_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUIDE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("guideTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUTTON_NAME, new org.apache.thrift.meta_data.FieldMetaData("buttonName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINKURL, new org.apache.thrift.meta_data.FieldMetaData("linkurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("cpAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cpVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("cpLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("cpPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_ICON, new org.apache.thrift.meta_data.FieldMetaData("cpIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_APK, new org.apache.thrift.meta_data.FieldMetaData("cpApk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_MEMO, new org.apache.thrift.meta_data.FieldMetaData("cpMemo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_IMGS, new org.apache.thrift.meta_data.FieldMetaData("cpImgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CPCLASS, new org.apache.thrift.meta_data.FieldMetaData("cpclass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TURN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("turn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("param_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_URL, new org.apache.thrift.meta_data.FieldMetaData("third_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINKURL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("linkurl_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_URI, new org.apache.thrift.meta_data.FieldMetaData("activeUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_ON_ACT, new org.apache.thrift.meta_data.FieldMetaData("screenOnAct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SILENT_INSTALL_RATE, new org.apache.thrift.meta_data.FieldMetaData("silentInstallRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_RATE, new org.apache.thrift.meta_data.FieldMetaData("activeRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_RATE, new org.apache.thrift.meta_data.FieldMetaData("clickRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CP_APK_MD5, new org.apache.thrift.meta_data.FieldMetaData("cpApkMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_APK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cpApkSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdMutiAction.class, metaDataMap);
  }

  public AdMutiAction() {
    this.linkurl_type = 0;

  }

  public AdMutiAction(
    int type)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdMutiAction(AdMutiAction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    if (other.isSetGuideTitle()) {
      this.guideTitle = other.guideTitle;
    }
    if (other.isSetButtonName()) {
      this.buttonName = other.buttonName;
    }
    if (other.isSetLinkurl()) {
      this.linkurl = other.linkurl;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetCpName()) {
      this.cpName = other.cpName;
    }
    if (other.isSetCpAuthor()) {
      this.cpAuthor = other.cpAuthor;
    }
    if (other.isSetCpVersion()) {
      this.cpVersion = other.cpVersion;
    }
    if (other.isSetCpLanguage()) {
      this.cpLanguage = other.cpLanguage;
    }
    if (other.isSetCpPackage()) {
      this.cpPackage = other.cpPackage;
    }
    if (other.isSetCpIcon()) {
      this.cpIcon = other.cpIcon;
    }
    if (other.isSetCpApk()) {
      this.cpApk = other.cpApk;
    }
    if (other.isSetCpMemo()) {
      this.cpMemo = other.cpMemo;
    }
    if (other.isSetCpImgs()) {
      List<String> __this__cpImgs = new ArrayList<String>(other.cpImgs);
      this.cpImgs = __this__cpImgs;
    }
    if (other.isSetCpclass()) {
      this.cpclass = other.cpclass;
    }
    this.turn_type = other.turn_type;
    this.param_type = other.param_type;
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetThird_url()) {
      this.third_url = other.third_url;
    }
    this.linkurl_type = other.linkurl_type;
    if (other.isSetActiveUri()) {
      this.activeUri = other.activeUri;
    }
    this.screenOnAct = other.screenOnAct;
    this.silentInstallRate = other.silentInstallRate;
    this.activeRate = other.activeRate;
    this.clickRate = other.clickRate;
    if (other.isSetCpApkMd5()) {
      this.cpApkMd5 = other.cpApkMd5;
    }
    this.cpApkSize = other.cpApkSize;
  }

  public AdMutiAction deepCopy() {
    return new AdMutiAction(this);
  }

  
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    this.guideTitle = null;
    this.buttonName = null;
    this.linkurl = null;
    this.phone = null;
    this.cpName = null;
    this.cpAuthor = null;
    this.cpVersion = null;
    this.cpLanguage = null;
    this.cpPackage = null;
    this.cpIcon = null;
    this.cpApk = null;
    this.cpMemo = null;
    this.cpImgs = null;
    this.cpclass = null;
    setTurn_typeIsSet(false);
    this.turn_type = 0;
    setParam_typeIsSet(false);
    this.param_type = 0;
    this.action = null;
    this.third_url = null;
    this.linkurl_type = 0;

    this.activeUri = null;
    setScreenOnActIsSet(false);
    this.screenOnAct = 0;
    setSilentInstallRateIsSet(false);
    this.silentInstallRate = 0;
    setActiveRateIsSet(false);
    this.activeRate = 0;
    setClickRateIsSet(false);
    this.clickRate = 0;
    this.cpApkMd5 = null;
    setCpApkSizeIsSet(false);
    this.cpApkSize = 0;
  }

  public int getType() {
    return this.type;
  }

  public AdMutiAction setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getGuideTitle() {
    return this.guideTitle;
  }

  public AdMutiAction setGuideTitle(String guideTitle) {
    this.guideTitle = guideTitle;
    return this;
  }

  public void unsetGuideTitle() {
    this.guideTitle = null;
  }

  /** Returns true if field guideTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetGuideTitle() {
    return this.guideTitle != null;
  }

  public void setGuideTitleIsSet(boolean value) {
    if (!value) {
      this.guideTitle = null;
    }
  }

  public String getButtonName() {
    return this.buttonName;
  }

  public AdMutiAction setButtonName(String buttonName) {
    this.buttonName = buttonName;
    return this;
  }

  public void unsetButtonName() {
    this.buttonName = null;
  }

  /** Returns true if field buttonName is set (has been assigned a value) and false otherwise */
  public boolean isSetButtonName() {
    return this.buttonName != null;
  }

  public void setButtonNameIsSet(boolean value) {
    if (!value) {
      this.buttonName = null;
    }
  }

  public String getLinkurl() {
    return this.linkurl;
  }

  public AdMutiAction setLinkurl(String linkurl) {
    this.linkurl = linkurl;
    return this;
  }

  public void unsetLinkurl() {
    this.linkurl = null;
  }

  /** Returns true if field linkurl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkurl() {
    return this.linkurl != null;
  }

  public void setLinkurlIsSet(boolean value) {
    if (!value) {
      this.linkurl = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public AdMutiAction setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getCpName() {
    return this.cpName;
  }

  public AdMutiAction setCpName(String cpName) {
    this.cpName = cpName;
    return this;
  }

  public void unsetCpName() {
    this.cpName = null;
  }

  /** Returns true if field cpName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpName() {
    return this.cpName != null;
  }

  public void setCpNameIsSet(boolean value) {
    if (!value) {
      this.cpName = null;
    }
  }

  public String getCpAuthor() {
    return this.cpAuthor;
  }

  public AdMutiAction setCpAuthor(String cpAuthor) {
    this.cpAuthor = cpAuthor;
    return this;
  }

  public void unsetCpAuthor() {
    this.cpAuthor = null;
  }

  /** Returns true if field cpAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetCpAuthor() {
    return this.cpAuthor != null;
  }

  public void setCpAuthorIsSet(boolean value) {
    if (!value) {
      this.cpAuthor = null;
    }
  }

  public String getCpVersion() {
    return this.cpVersion;
  }

  public AdMutiAction setCpVersion(String cpVersion) {
    this.cpVersion = cpVersion;
    return this;
  }

  public void unsetCpVersion() {
    this.cpVersion = null;
  }

  /** Returns true if field cpVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCpVersion() {
    return this.cpVersion != null;
  }

  public void setCpVersionIsSet(boolean value) {
    if (!value) {
      this.cpVersion = null;
    }
  }

  public String getCpLanguage() {
    return this.cpLanguage;
  }

  public AdMutiAction setCpLanguage(String cpLanguage) {
    this.cpLanguage = cpLanguage;
    return this;
  }

  public void unsetCpLanguage() {
    this.cpLanguage = null;
  }

  /** Returns true if field cpLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpLanguage() {
    return this.cpLanguage != null;
  }

  public void setCpLanguageIsSet(boolean value) {
    if (!value) {
      this.cpLanguage = null;
    }
  }

  public String getCpPackage() {
    return this.cpPackage;
  }

  public AdMutiAction setCpPackage(String cpPackage) {
    this.cpPackage = cpPackage;
    return this;
  }

  public void unsetCpPackage() {
    this.cpPackage = null;
  }

  /** Returns true if field cpPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpPackage() {
    return this.cpPackage != null;
  }

  public void setCpPackageIsSet(boolean value) {
    if (!value) {
      this.cpPackage = null;
    }
  }

  public String getCpIcon() {
    return this.cpIcon;
  }

  public AdMutiAction setCpIcon(String cpIcon) {
    this.cpIcon = cpIcon;
    return this;
  }

  public void unsetCpIcon() {
    this.cpIcon = null;
  }

  /** Returns true if field cpIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetCpIcon() {
    return this.cpIcon != null;
  }

  public void setCpIconIsSet(boolean value) {
    if (!value) {
      this.cpIcon = null;
    }
  }

  public String getCpApk() {
    return this.cpApk;
  }

  public AdMutiAction setCpApk(String cpApk) {
    this.cpApk = cpApk;
    return this;
  }

  public void unsetCpApk() {
    this.cpApk = null;
  }

  /** Returns true if field cpApk is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApk() {
    return this.cpApk != null;
  }

  public void setCpApkIsSet(boolean value) {
    if (!value) {
      this.cpApk = null;
    }
  }

  public String getCpMemo() {
    return this.cpMemo;
  }

  public AdMutiAction setCpMemo(String cpMemo) {
    this.cpMemo = cpMemo;
    return this;
  }

  public void unsetCpMemo() {
    this.cpMemo = null;
  }

  /** Returns true if field cpMemo is set (has been assigned a value) and false otherwise */
  public boolean isSetCpMemo() {
    return this.cpMemo != null;
  }

  public void setCpMemoIsSet(boolean value) {
    if (!value) {
      this.cpMemo = null;
    }
  }

  public int getCpImgsSize() {
    return (this.cpImgs == null) ? 0 : this.cpImgs.size();
  }

  public java.util.Iterator<String> getCpImgsIterator() {
    return (this.cpImgs == null) ? null : this.cpImgs.iterator();
  }

  public void addToCpImgs(String elem) {
    if (this.cpImgs == null) {
      this.cpImgs = new ArrayList<String>();
    }
    this.cpImgs.add(elem);
  }

  public List<String> getCpImgs() {
    return this.cpImgs;
  }

  public AdMutiAction setCpImgs(List<String> cpImgs) {
    this.cpImgs = cpImgs;
    return this;
  }

  public void unsetCpImgs() {
    this.cpImgs = null;
  }

  /** Returns true if field cpImgs is set (has been assigned a value) and false otherwise */
  public boolean isSetCpImgs() {
    return this.cpImgs != null;
  }

  public void setCpImgsIsSet(boolean value) {
    if (!value) {
      this.cpImgs = null;
    }
  }

  public String getCpclass() {
    return this.cpclass;
  }

  public AdMutiAction setCpclass(String cpclass) {
    this.cpclass = cpclass;
    return this;
  }

  public void unsetCpclass() {
    this.cpclass = null;
  }

  /** Returns true if field cpclass is set (has been assigned a value) and false otherwise */
  public boolean isSetCpclass() {
    return this.cpclass != null;
  }

  public void setCpclassIsSet(boolean value) {
    if (!value) {
      this.cpclass = null;
    }
  }

  public int getTurn_type() {
    return this.turn_type;
  }

  public AdMutiAction setTurn_type(int turn_type) {
    this.turn_type = turn_type;
    setTurn_typeIsSet(true);
    return this;
  }

  public void unsetTurn_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURN_TYPE_ISSET_ID);
  }

  /** Returns true if field turn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTurn_type() {
    return EncodingUtils.testBit(__isset_bitfield, __TURN_TYPE_ISSET_ID);
  }

  public void setTurn_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURN_TYPE_ISSET_ID, value);
  }

  public int getParam_type() {
    return this.param_type;
  }

  public AdMutiAction setParam_type(int param_type) {
    this.param_type = param_type;
    setParam_typeIsSet(true);
    return this;
  }

  public void unsetParam_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID);
  }

  /** Returns true if field param_type is set (has been assigned a value) and false otherwise */
  public boolean isSetParam_type() {
    return EncodingUtils.testBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID);
  }

  public void setParam_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM_TYPE_ISSET_ID, value);
  }

  public String getAction() {
    return this.action;
  }

  public AdMutiAction setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public String getThird_url() {
    return this.third_url;
  }

  public AdMutiAction setThird_url(String third_url) {
    this.third_url = third_url;
    return this;
  }

  public void unsetThird_url() {
    this.third_url = null;
  }

  /** Returns true if field third_url is set (has been assigned a value) and false otherwise */
  public boolean isSetThird_url() {
    return this.third_url != null;
  }

  public void setThird_urlIsSet(boolean value) {
    if (!value) {
      this.third_url = null;
    }
  }

  public int getLinkurl_type() {
    return this.linkurl_type;
  }

  public AdMutiAction setLinkurl_type(int linkurl_type) {
    this.linkurl_type = linkurl_type;
    setLinkurl_typeIsSet(true);
    return this;
  }

  public void unsetLinkurl_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKURL_TYPE_ISSET_ID);
  }

  /** Returns true if field linkurl_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkurl_type() {
    return EncodingUtils.testBit(__isset_bitfield, __LINKURL_TYPE_ISSET_ID);
  }

  public void setLinkurl_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKURL_TYPE_ISSET_ID, value);
  }

  public String getActiveUri() {
    return this.activeUri;
  }

  public AdMutiAction setActiveUri(String activeUri) {
    this.activeUri = activeUri;
    return this;
  }

  public void unsetActiveUri() {
    this.activeUri = null;
  }

  /** Returns true if field activeUri is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveUri() {
    return this.activeUri != null;
  }

  public void setActiveUriIsSet(boolean value) {
    if (!value) {
      this.activeUri = null;
    }
  }

  public int getScreenOnAct() {
    return this.screenOnAct;
  }

  public AdMutiAction setScreenOnAct(int screenOnAct) {
    this.screenOnAct = screenOnAct;
    setScreenOnActIsSet(true);
    return this;
  }

  public void unsetScreenOnAct() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCREENONACT_ISSET_ID);
  }

  /** Returns true if field screenOnAct is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenOnAct() {
    return EncodingUtils.testBit(__isset_bitfield, __SCREENONACT_ISSET_ID);
  }

  public void setScreenOnActIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCREENONACT_ISSET_ID, value);
  }

  public int getSilentInstallRate() {
    return this.silentInstallRate;
  }

  public AdMutiAction setSilentInstallRate(int silentInstallRate) {
    this.silentInstallRate = silentInstallRate;
    setSilentInstallRateIsSet(true);
    return this;
  }

  public void unsetSilentInstallRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SILENTINSTALLRATE_ISSET_ID);
  }

  /** Returns true if field silentInstallRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSilentInstallRate() {
    return EncodingUtils.testBit(__isset_bitfield, __SILENTINSTALLRATE_ISSET_ID);
  }

  public void setSilentInstallRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SILENTINSTALLRATE_ISSET_ID, value);
  }

  public int getActiveRate() {
    return this.activeRate;
  }

  public AdMutiAction setActiveRate(int activeRate) {
    this.activeRate = activeRate;
    setActiveRateIsSet(true);
    return this;
  }

  public void unsetActiveRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVERATE_ISSET_ID);
  }

  /** Returns true if field activeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVERATE_ISSET_ID);
  }

  public void setActiveRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVERATE_ISSET_ID, value);
  }

  public int getClickRate() {
    return this.clickRate;
  }

  public AdMutiAction setClickRate(int clickRate) {
    this.clickRate = clickRate;
    setClickRateIsSet(true);
    return this;
  }

  public void unsetClickRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLICKRATE_ISSET_ID);
  }

  /** Returns true if field clickRate is set (has been assigned a value) and false otherwise */
  public boolean isSetClickRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CLICKRATE_ISSET_ID);
  }

  public void setClickRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLICKRATE_ISSET_ID, value);
  }

  public String getCpApkMd5() {
    return this.cpApkMd5;
  }

  public AdMutiAction setCpApkMd5(String cpApkMd5) {
    this.cpApkMd5 = cpApkMd5;
    return this;
  }

  public void unsetCpApkMd5() {
    this.cpApkMd5 = null;
  }

  /** Returns true if field cpApkMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApkMd5() {
    return this.cpApkMd5 != null;
  }

  public void setCpApkMd5IsSet(boolean value) {
    if (!value) {
      this.cpApkMd5 = null;
    }
  }

  public long getCpApkSize() {
    return this.cpApkSize;
  }

  public AdMutiAction setCpApkSize(long cpApkSize) {
    this.cpApkSize = cpApkSize;
    setCpApkSizeIsSet(true);
    return this;
  }

  public void unsetCpApkSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID);
  }

  /** Returns true if field cpApkSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApkSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID);
  }

  public void setCpApkSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case GUIDE_TITLE:
      if (value == null) {
        unsetGuideTitle();
      } else {
        setGuideTitle((String)value);
      }
      break;

    case BUTTON_NAME:
      if (value == null) {
        unsetButtonName();
      } else {
        setButtonName((String)value);
      }
      break;

    case LINKURL:
      if (value == null) {
        unsetLinkurl();
      } else {
        setLinkurl((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case CP_NAME:
      if (value == null) {
        unsetCpName();
      } else {
        setCpName((String)value);
      }
      break;

    case CP_AUTHOR:
      if (value == null) {
        unsetCpAuthor();
      } else {
        setCpAuthor((String)value);
      }
      break;

    case CP_VERSION:
      if (value == null) {
        unsetCpVersion();
      } else {
        setCpVersion((String)value);
      }
      break;

    case CP_LANGUAGE:
      if (value == null) {
        unsetCpLanguage();
      } else {
        setCpLanguage((String)value);
      }
      break;

    case CP_PACKAGE:
      if (value == null) {
        unsetCpPackage();
      } else {
        setCpPackage((String)value);
      }
      break;

    case CP_ICON:
      if (value == null) {
        unsetCpIcon();
      } else {
        setCpIcon((String)value);
      }
      break;

    case CP_APK:
      if (value == null) {
        unsetCpApk();
      } else {
        setCpApk((String)value);
      }
      break;

    case CP_MEMO:
      if (value == null) {
        unsetCpMemo();
      } else {
        setCpMemo((String)value);
      }
      break;

    case CP_IMGS:
      if (value == null) {
        unsetCpImgs();
      } else {
        setCpImgs((List<String>)value);
      }
      break;

    case CPCLASS:
      if (value == null) {
        unsetCpclass();
      } else {
        setCpclass((String)value);
      }
      break;

    case TURN_TYPE:
      if (value == null) {
        unsetTurn_type();
      } else {
        setTurn_type((Integer)value);
      }
      break;

    case PARAM_TYPE:
      if (value == null) {
        unsetParam_type();
      } else {
        setParam_type((Integer)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case THIRD_URL:
      if (value == null) {
        unsetThird_url();
      } else {
        setThird_url((String)value);
      }
      break;

    case LINKURL_TYPE:
      if (value == null) {
        unsetLinkurl_type();
      } else {
        setLinkurl_type((Integer)value);
      }
      break;

    case ACTIVE_URI:
      if (value == null) {
        unsetActiveUri();
      } else {
        setActiveUri((String)value);
      }
      break;

    case SCREEN_ON_ACT:
      if (value == null) {
        unsetScreenOnAct();
      } else {
        setScreenOnAct((Integer)value);
      }
      break;

    case SILENT_INSTALL_RATE:
      if (value == null) {
        unsetSilentInstallRate();
      } else {
        setSilentInstallRate((Integer)value);
      }
      break;

    case ACTIVE_RATE:
      if (value == null) {
        unsetActiveRate();
      } else {
        setActiveRate((Integer)value);
      }
      break;

    case CLICK_RATE:
      if (value == null) {
        unsetClickRate();
      } else {
        setClickRate((Integer)value);
      }
      break;

    case CP_APK_MD5:
      if (value == null) {
        unsetCpApkMd5();
      } else {
        setCpApkMd5((String)value);
      }
      break;

    case CP_APK_SIZE:
      if (value == null) {
        unsetCpApkSize();
      } else {
        setCpApkSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return Integer.valueOf(getType());

    case GUIDE_TITLE:
      return getGuideTitle();

    case BUTTON_NAME:
      return getButtonName();

    case LINKURL:
      return getLinkurl();

    case PHONE:
      return getPhone();

    case CP_NAME:
      return getCpName();

    case CP_AUTHOR:
      return getCpAuthor();

    case CP_VERSION:
      return getCpVersion();

    case CP_LANGUAGE:
      return getCpLanguage();

    case CP_PACKAGE:
      return getCpPackage();

    case CP_ICON:
      return getCpIcon();

    case CP_APK:
      return getCpApk();

    case CP_MEMO:
      return getCpMemo();

    case CP_IMGS:
      return getCpImgs();

    case CPCLASS:
      return getCpclass();

    case TURN_TYPE:
      return Integer.valueOf(getTurn_type());

    case PARAM_TYPE:
      return Integer.valueOf(getParam_type());

    case ACTION:
      return getAction();

    case THIRD_URL:
      return getThird_url();

    case LINKURL_TYPE:
      return Integer.valueOf(getLinkurl_type());

    case ACTIVE_URI:
      return getActiveUri();

    case SCREEN_ON_ACT:
      return Integer.valueOf(getScreenOnAct());

    case SILENT_INSTALL_RATE:
      return Integer.valueOf(getSilentInstallRate());

    case ACTIVE_RATE:
      return Integer.valueOf(getActiveRate());

    case CLICK_RATE:
      return Integer.valueOf(getClickRate());

    case CP_APK_MD5:
      return getCpApkMd5();

    case CP_APK_SIZE:
      return Long.valueOf(getCpApkSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case GUIDE_TITLE:
      return isSetGuideTitle();
    case BUTTON_NAME:
      return isSetButtonName();
    case LINKURL:
      return isSetLinkurl();
    case PHONE:
      return isSetPhone();
    case CP_NAME:
      return isSetCpName();
    case CP_AUTHOR:
      return isSetCpAuthor();
    case CP_VERSION:
      return isSetCpVersion();
    case CP_LANGUAGE:
      return isSetCpLanguage();
    case CP_PACKAGE:
      return isSetCpPackage();
    case CP_ICON:
      return isSetCpIcon();
    case CP_APK:
      return isSetCpApk();
    case CP_MEMO:
      return isSetCpMemo();
    case CP_IMGS:
      return isSetCpImgs();
    case CPCLASS:
      return isSetCpclass();
    case TURN_TYPE:
      return isSetTurn_type();
    case PARAM_TYPE:
      return isSetParam_type();
    case ACTION:
      return isSetAction();
    case THIRD_URL:
      return isSetThird_url();
    case LINKURL_TYPE:
      return isSetLinkurl_type();
    case ACTIVE_URI:
      return isSetActiveUri();
    case SCREEN_ON_ACT:
      return isSetScreenOnAct();
    case SILENT_INSTALL_RATE:
      return isSetSilentInstallRate();
    case ACTIVE_RATE:
      return isSetActiveRate();
    case CLICK_RATE:
      return isSetClickRate();
    case CP_APK_MD5:
      return isSetCpApkMd5();
    case CP_APK_SIZE:
      return isSetCpApkSize();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdMutiAction)
      return this.equals((AdMutiAction)that);
    return false;
  }

  public boolean equals(AdMutiAction that) {
    if (that == null)
      return false;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_guideTitle = true && this.isSetGuideTitle();
    boolean that_present_guideTitle = true && that.isSetGuideTitle();
    if (this_present_guideTitle || that_present_guideTitle) {
      if (!(this_present_guideTitle && that_present_guideTitle))
        return false;
      if (!this.guideTitle.equals(that.guideTitle))
        return false;
    }

    boolean this_present_buttonName = true && this.isSetButtonName();
    boolean that_present_buttonName = true && that.isSetButtonName();
    if (this_present_buttonName || that_present_buttonName) {
      if (!(this_present_buttonName && that_present_buttonName))
        return false;
      if (!this.buttonName.equals(that.buttonName))
        return false;
    }

    boolean this_present_linkurl = true && this.isSetLinkurl();
    boolean that_present_linkurl = true && that.isSetLinkurl();
    if (this_present_linkurl || that_present_linkurl) {
      if (!(this_present_linkurl && that_present_linkurl))
        return false;
      if (!this.linkurl.equals(that.linkurl))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_cpName = true && this.isSetCpName();
    boolean that_present_cpName = true && that.isSetCpName();
    if (this_present_cpName || that_present_cpName) {
      if (!(this_present_cpName && that_present_cpName))
        return false;
      if (!this.cpName.equals(that.cpName))
        return false;
    }

    boolean this_present_cpAuthor = true && this.isSetCpAuthor();
    boolean that_present_cpAuthor = true && that.isSetCpAuthor();
    if (this_present_cpAuthor || that_present_cpAuthor) {
      if (!(this_present_cpAuthor && that_present_cpAuthor))
        return false;
      if (!this.cpAuthor.equals(that.cpAuthor))
        return false;
    }

    boolean this_present_cpVersion = true && this.isSetCpVersion();
    boolean that_present_cpVersion = true && that.isSetCpVersion();
    if (this_present_cpVersion || that_present_cpVersion) {
      if (!(this_present_cpVersion && that_present_cpVersion))
        return false;
      if (!this.cpVersion.equals(that.cpVersion))
        return false;
    }

    boolean this_present_cpLanguage = true && this.isSetCpLanguage();
    boolean that_present_cpLanguage = true && that.isSetCpLanguage();
    if (this_present_cpLanguage || that_present_cpLanguage) {
      if (!(this_present_cpLanguage && that_present_cpLanguage))
        return false;
      if (!this.cpLanguage.equals(that.cpLanguage))
        return false;
    }

    boolean this_present_cpPackage = true && this.isSetCpPackage();
    boolean that_present_cpPackage = true && that.isSetCpPackage();
    if (this_present_cpPackage || that_present_cpPackage) {
      if (!(this_present_cpPackage && that_present_cpPackage))
        return false;
      if (!this.cpPackage.equals(that.cpPackage))
        return false;
    }

    boolean this_present_cpIcon = true && this.isSetCpIcon();
    boolean that_present_cpIcon = true && that.isSetCpIcon();
    if (this_present_cpIcon || that_present_cpIcon) {
      if (!(this_present_cpIcon && that_present_cpIcon))
        return false;
      if (!this.cpIcon.equals(that.cpIcon))
        return false;
    }

    boolean this_present_cpApk = true && this.isSetCpApk();
    boolean that_present_cpApk = true && that.isSetCpApk();
    if (this_present_cpApk || that_present_cpApk) {
      if (!(this_present_cpApk && that_present_cpApk))
        return false;
      if (!this.cpApk.equals(that.cpApk))
        return false;
    }

    boolean this_present_cpMemo = true && this.isSetCpMemo();
    boolean that_present_cpMemo = true && that.isSetCpMemo();
    if (this_present_cpMemo || that_present_cpMemo) {
      if (!(this_present_cpMemo && that_present_cpMemo))
        return false;
      if (!this.cpMemo.equals(that.cpMemo))
        return false;
    }

    boolean this_present_cpImgs = true && this.isSetCpImgs();
    boolean that_present_cpImgs = true && that.isSetCpImgs();
    if (this_present_cpImgs || that_present_cpImgs) {
      if (!(this_present_cpImgs && that_present_cpImgs))
        return false;
      if (!this.cpImgs.equals(that.cpImgs))
        return false;
    }

    boolean this_present_cpclass = true && this.isSetCpclass();
    boolean that_present_cpclass = true && that.isSetCpclass();
    if (this_present_cpclass || that_present_cpclass) {
      if (!(this_present_cpclass && that_present_cpclass))
        return false;
      if (!this.cpclass.equals(that.cpclass))
        return false;
    }

    boolean this_present_turn_type = true && this.isSetTurn_type();
    boolean that_present_turn_type = true && that.isSetTurn_type();
    if (this_present_turn_type || that_present_turn_type) {
      if (!(this_present_turn_type && that_present_turn_type))
        return false;
      if (this.turn_type != that.turn_type)
        return false;
    }

    boolean this_present_param_type = true && this.isSetParam_type();
    boolean that_present_param_type = true && that.isSetParam_type();
    if (this_present_param_type || that_present_param_type) {
      if (!(this_present_param_type && that_present_param_type))
        return false;
      if (this.param_type != that.param_type)
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_third_url = true && this.isSetThird_url();
    boolean that_present_third_url = true && that.isSetThird_url();
    if (this_present_third_url || that_present_third_url) {
      if (!(this_present_third_url && that_present_third_url))
        return false;
      if (!this.third_url.equals(that.third_url))
        return false;
    }

    boolean this_present_linkurl_type = true && this.isSetLinkurl_type();
    boolean that_present_linkurl_type = true && that.isSetLinkurl_type();
    if (this_present_linkurl_type || that_present_linkurl_type) {
      if (!(this_present_linkurl_type && that_present_linkurl_type))
        return false;
      if (this.linkurl_type != that.linkurl_type)
        return false;
    }

    boolean this_present_activeUri = true && this.isSetActiveUri();
    boolean that_present_activeUri = true && that.isSetActiveUri();
    if (this_present_activeUri || that_present_activeUri) {
      if (!(this_present_activeUri && that_present_activeUri))
        return false;
      if (!this.activeUri.equals(that.activeUri))
        return false;
    }

    boolean this_present_screenOnAct = true && this.isSetScreenOnAct();
    boolean that_present_screenOnAct = true && that.isSetScreenOnAct();
    if (this_present_screenOnAct || that_present_screenOnAct) {
      if (!(this_present_screenOnAct && that_present_screenOnAct))
        return false;
      if (this.screenOnAct != that.screenOnAct)
        return false;
    }

    boolean this_present_silentInstallRate = true && this.isSetSilentInstallRate();
    boolean that_present_silentInstallRate = true && that.isSetSilentInstallRate();
    if (this_present_silentInstallRate || that_present_silentInstallRate) {
      if (!(this_present_silentInstallRate && that_present_silentInstallRate))
        return false;
      if (this.silentInstallRate != that.silentInstallRate)
        return false;
    }

    boolean this_present_activeRate = true && this.isSetActiveRate();
    boolean that_present_activeRate = true && that.isSetActiveRate();
    if (this_present_activeRate || that_present_activeRate) {
      if (!(this_present_activeRate && that_present_activeRate))
        return false;
      if (this.activeRate != that.activeRate)
        return false;
    }

    boolean this_present_clickRate = true && this.isSetClickRate();
    boolean that_present_clickRate = true && that.isSetClickRate();
    if (this_present_clickRate || that_present_clickRate) {
      if (!(this_present_clickRate && that_present_clickRate))
        return false;
      if (this.clickRate != that.clickRate)
        return false;
    }

    boolean this_present_cpApkMd5 = true && this.isSetCpApkMd5();
    boolean that_present_cpApkMd5 = true && that.isSetCpApkMd5();
    if (this_present_cpApkMd5 || that_present_cpApkMd5) {
      if (!(this_present_cpApkMd5 && that_present_cpApkMd5))
        return false;
      if (!this.cpApkMd5.equals(that.cpApkMd5))
        return false;
    }

    boolean this_present_cpApkSize = true && this.isSetCpApkSize();
    boolean that_present_cpApkSize = true && that.isSetCpApkSize();
    if (this_present_cpApkSize || that_present_cpApkSize) {
      if (!(this_present_cpApkSize && that_present_cpApkSize))
        return false;
      if (this.cpApkSize != that.cpApkSize)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_guideTitle = true && (isSetGuideTitle());
    list.add(present_guideTitle);
    if (present_guideTitle)
      list.add(guideTitle);

    boolean present_buttonName = true && (isSetButtonName());
    list.add(present_buttonName);
    if (present_buttonName)
      list.add(buttonName);

    boolean present_linkurl = true && (isSetLinkurl());
    list.add(present_linkurl);
    if (present_linkurl)
      list.add(linkurl);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_cpName = true && (isSetCpName());
    list.add(present_cpName);
    if (present_cpName)
      list.add(cpName);

    boolean present_cpAuthor = true && (isSetCpAuthor());
    list.add(present_cpAuthor);
    if (present_cpAuthor)
      list.add(cpAuthor);

    boolean present_cpVersion = true && (isSetCpVersion());
    list.add(present_cpVersion);
    if (present_cpVersion)
      list.add(cpVersion);

    boolean present_cpLanguage = true && (isSetCpLanguage());
    list.add(present_cpLanguage);
    if (present_cpLanguage)
      list.add(cpLanguage);

    boolean present_cpPackage = true && (isSetCpPackage());
    list.add(present_cpPackage);
    if (present_cpPackage)
      list.add(cpPackage);

    boolean present_cpIcon = true && (isSetCpIcon());
    list.add(present_cpIcon);
    if (present_cpIcon)
      list.add(cpIcon);

    boolean present_cpApk = true && (isSetCpApk());
    list.add(present_cpApk);
    if (present_cpApk)
      list.add(cpApk);

    boolean present_cpMemo = true && (isSetCpMemo());
    list.add(present_cpMemo);
    if (present_cpMemo)
      list.add(cpMemo);

    boolean present_cpImgs = true && (isSetCpImgs());
    list.add(present_cpImgs);
    if (present_cpImgs)
      list.add(cpImgs);

    boolean present_cpclass = true && (isSetCpclass());
    list.add(present_cpclass);
    if (present_cpclass)
      list.add(cpclass);

    boolean present_turn_type = true && (isSetTurn_type());
    list.add(present_turn_type);
    if (present_turn_type)
      list.add(turn_type);

    boolean present_param_type = true && (isSetParam_type());
    list.add(present_param_type);
    if (present_param_type)
      list.add(param_type);

    boolean present_action = true && (isSetAction());
    list.add(present_action);
    if (present_action)
      list.add(action);

    boolean present_third_url = true && (isSetThird_url());
    list.add(present_third_url);
    if (present_third_url)
      list.add(third_url);

    boolean present_linkurl_type = true && (isSetLinkurl_type());
    list.add(present_linkurl_type);
    if (present_linkurl_type)
      list.add(linkurl_type);

    boolean present_activeUri = true && (isSetActiveUri());
    list.add(present_activeUri);
    if (present_activeUri)
      list.add(activeUri);

    boolean present_screenOnAct = true && (isSetScreenOnAct());
    list.add(present_screenOnAct);
    if (present_screenOnAct)
      list.add(screenOnAct);

    boolean present_silentInstallRate = true && (isSetSilentInstallRate());
    list.add(present_silentInstallRate);
    if (present_silentInstallRate)
      list.add(silentInstallRate);

    boolean present_activeRate = true && (isSetActiveRate());
    list.add(present_activeRate);
    if (present_activeRate)
      list.add(activeRate);

    boolean present_clickRate = true && (isSetClickRate());
    list.add(present_clickRate);
    if (present_clickRate)
      list.add(clickRate);

    boolean present_cpApkMd5 = true && (isSetCpApkMd5());
    list.add(present_cpApkMd5);
    if (present_cpApkMd5)
      list.add(cpApkMd5);

    boolean present_cpApkSize = true && (isSetCpApkSize());
    list.add(present_cpApkSize);
    if (present_cpApkSize)
      list.add(cpApkSize);

    return list.hashCode();
  }

  
  public int compareTo(AdMutiAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuideTitle()).compareTo(other.isSetGuideTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuideTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guideTitle, other.guideTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetButtonName()).compareTo(other.isSetButtonName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButtonName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonName, other.buttonName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkurl()).compareTo(other.isSetLinkurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkurl, other.linkurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpName()).compareTo(other.isSetCpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpName, other.cpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpAuthor()).compareTo(other.isSetCpAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpAuthor, other.cpAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpVersion()).compareTo(other.isSetCpVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpVersion, other.cpVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpLanguage()).compareTo(other.isSetCpLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpLanguage, other.cpLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpPackage()).compareTo(other.isSetCpPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpPackage, other.cpPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpIcon()).compareTo(other.isSetCpIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpIcon, other.cpIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApk()).compareTo(other.isSetCpApk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApk, other.cpApk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpMemo()).compareTo(other.isSetCpMemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpMemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpMemo, other.cpMemo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpImgs()).compareTo(other.isSetCpImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpImgs, other.cpImgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpclass()).compareTo(other.isSetCpclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpclass, other.cpclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurn_type()).compareTo(other.isSetTurn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turn_type, other.turn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam_type()).compareTo(other.isSetParam_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param_type, other.param_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThird_url()).compareTo(other.isSetThird_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third_url, other.third_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkurl_type()).compareTo(other.isSetLinkurl_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkurl_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkurl_type, other.linkurl_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveUri()).compareTo(other.isSetActiveUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeUri, other.activeUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenOnAct()).compareTo(other.isSetScreenOnAct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenOnAct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenOnAct, other.screenOnAct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSilentInstallRate()).compareTo(other.isSetSilentInstallRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSilentInstallRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.silentInstallRate, other.silentInstallRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveRate()).compareTo(other.isSetActiveRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRate, other.activeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickRate()).compareTo(other.isSetClickRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickRate, other.clickRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApkMd5()).compareTo(other.isSetCpApkMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApkMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApkMd5, other.cpApkMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApkSize()).compareTo(other.isSetCpApkSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApkSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApkSize, other.cpApkSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AdMutiAction(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (isSetGuideTitle()) {
      if (!first) sb.append(", ");
      sb.append("guideTitle:");
      if (this.guideTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.guideTitle);
      }
      first = false;
    }
    if (isSetButtonName()) {
      if (!first) sb.append(", ");
      sb.append("buttonName:");
      if (this.buttonName == null) {
        sb.append("null");
      } else {
        sb.append(this.buttonName);
      }
      first = false;
    }
    if (isSetLinkurl()) {
      if (!first) sb.append(", ");
      sb.append("linkurl:");
      if (this.linkurl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkurl);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetCpName()) {
      if (!first) sb.append(", ");
      sb.append("cpName:");
      if (this.cpName == null) {
        sb.append("null");
      } else {
        sb.append(this.cpName);
      }
      first = false;
    }
    if (isSetCpAuthor()) {
      if (!first) sb.append(", ");
      sb.append("cpAuthor:");
      if (this.cpAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.cpAuthor);
      }
      first = false;
    }
    if (isSetCpVersion()) {
      if (!first) sb.append(", ");
      sb.append("cpVersion:");
      if (this.cpVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.cpVersion);
      }
      first = false;
    }
    if (isSetCpLanguage()) {
      if (!first) sb.append(", ");
      sb.append("cpLanguage:");
      if (this.cpLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpLanguage);
      }
      first = false;
    }
    if (isSetCpPackage()) {
      if (!first) sb.append(", ");
      sb.append("cpPackage:");
      if (this.cpPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpPackage);
      }
      first = false;
    }
    if (isSetCpIcon()) {
      if (!first) sb.append(", ");
      sb.append("cpIcon:");
      if (this.cpIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.cpIcon);
      }
      first = false;
    }
    if (isSetCpApk()) {
      if (!first) sb.append(", ");
      sb.append("cpApk:");
      if (this.cpApk == null) {
        sb.append("null");
      } else {
        sb.append(this.cpApk);
      }
      first = false;
    }
    if (isSetCpMemo()) {
      if (!first) sb.append(", ");
      sb.append("cpMemo:");
      if (this.cpMemo == null) {
        sb.append("null");
      } else {
        sb.append(this.cpMemo);
      }
      first = false;
    }
    if (isSetCpImgs()) {
      if (!first) sb.append(", ");
      sb.append("cpImgs:");
      if (this.cpImgs == null) {
        sb.append("null");
      } else {
        sb.append(this.cpImgs);
      }
      first = false;
    }
    if (isSetCpclass()) {
      if (!first) sb.append(", ");
      sb.append("cpclass:");
      if (this.cpclass == null) {
        sb.append("null");
      } else {
        sb.append(this.cpclass);
      }
      first = false;
    }
    if (isSetTurn_type()) {
      if (!first) sb.append(", ");
      sb.append("turn_type:");
      sb.append(this.turn_type);
      first = false;
    }
    if (isSetParam_type()) {
      if (!first) sb.append(", ");
      sb.append("param_type:");
      sb.append(this.param_type);
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetThird_url()) {
      if (!first) sb.append(", ");
      sb.append("third_url:");
      if (this.third_url == null) {
        sb.append("null");
      } else {
        sb.append(this.third_url);
      }
      first = false;
    }
    if (isSetLinkurl_type()) {
      if (!first) sb.append(", ");
      sb.append("linkurl_type:");
      sb.append(this.linkurl_type);
      first = false;
    }
    if (isSetActiveUri()) {
      if (!first) sb.append(", ");
      sb.append("activeUri:");
      if (this.activeUri == null) {
        sb.append("null");
      } else {
        sb.append(this.activeUri);
      }
      first = false;
    }
    if (isSetScreenOnAct()) {
      if (!first) sb.append(", ");
      sb.append("screenOnAct:");
      sb.append(this.screenOnAct);
      first = false;
    }
    if (isSetSilentInstallRate()) {
      if (!first) sb.append(", ");
      sb.append("silentInstallRate:");
      sb.append(this.silentInstallRate);
      first = false;
    }
    if (isSetActiveRate()) {
      if (!first) sb.append(", ");
      sb.append("activeRate:");
      sb.append(this.activeRate);
      first = false;
    }
    if (isSetClickRate()) {
      if (!first) sb.append(", ");
      sb.append("clickRate:");
      sb.append(this.clickRate);
      first = false;
    }
    if (isSetCpApkMd5()) {
      if (!first) sb.append(", ");
      sb.append("cpApkMd5:");
      if (this.cpApkMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.cpApkMd5);
      }
      first = false;
    }
    if (isSetCpApkSize()) {
      if (!first) sb.append(", ");
      sb.append("cpApkSize:");
      sb.append(this.cpApkSize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdMutiActionStandardSchemeFactory implements SchemeFactory {
    public AdMutiActionStandardScheme getScheme() {
      return new AdMutiActionStandardScheme();
    }
  }

  private static class AdMutiActionStandardScheme extends StandardScheme<AdMutiAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdMutiAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GUIDE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guideTitle = iprot.readString();
              struct.setGuideTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUTTON_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buttonName = iprot.readString();
              struct.setButtonNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINKURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkurl = iprot.readString();
              struct.setLinkurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpName = iprot.readString();
              struct.setCpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CP_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpAuthor = iprot.readString();
              struct.setCpAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpVersion = iprot.readString();
              struct.setCpVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CP_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpLanguage = iprot.readString();
              struct.setCpLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CP_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpPackage = iprot.readString();
              struct.setCpPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CP_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpIcon = iprot.readString();
              struct.setCpIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CP_APK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpApk = iprot.readString();
              struct.setCpApkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CP_MEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpMemo = iprot.readString();
              struct.setCpMemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CP_IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.cpImgs = new ArrayList<String>(_list70.size);
                String _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readString();
                  struct.cpImgs.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setCpImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CPCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpclass = iprot.readString();
              struct.setCpclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TURN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.turn_type = iprot.readI32();
              struct.setTurn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.param_type = iprot.readI32();
              struct.setParam_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // THIRD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.third_url = iprot.readString();
              struct.setThird_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LINKURL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.linkurl_type = iprot.readI32();
              struct.setLinkurl_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACTIVE_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeUri = iprot.readString();
              struct.setActiveUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SCREEN_ON_ACT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.screenOnAct = iprot.readI32();
              struct.setScreenOnActIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SILENT_INSTALL_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.silentInstallRate = iprot.readI32();
              struct.setSilentInstallRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ACTIVE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeRate = iprot.readI32();
              struct.setActiveRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CLICK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clickRate = iprot.readI32();
              struct.setClickRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CP_APK_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpApkMd5 = iprot.readString();
              struct.setCpApkMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CP_APK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpApkSize = iprot.readI64();
              struct.setCpApkSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdMutiAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.guideTitle != null) {
        if (struct.isSetGuideTitle()) {
          oprot.writeFieldBegin(GUIDE_TITLE_FIELD_DESC);
          oprot.writeString(struct.guideTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buttonName != null) {
        if (struct.isSetButtonName()) {
          oprot.writeFieldBegin(BUTTON_NAME_FIELD_DESC);
          oprot.writeString(struct.buttonName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkurl != null) {
        if (struct.isSetLinkurl()) {
          oprot.writeFieldBegin(LINKURL_FIELD_DESC);
          oprot.writeString(struct.linkurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpName != null) {
        if (struct.isSetCpName()) {
          oprot.writeFieldBegin(CP_NAME_FIELD_DESC);
          oprot.writeString(struct.cpName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpAuthor != null) {
        if (struct.isSetCpAuthor()) {
          oprot.writeFieldBegin(CP_AUTHOR_FIELD_DESC);
          oprot.writeString(struct.cpAuthor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpVersion != null) {
        if (struct.isSetCpVersion()) {
          oprot.writeFieldBegin(CP_VERSION_FIELD_DESC);
          oprot.writeString(struct.cpVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpLanguage != null) {
        if (struct.isSetCpLanguage()) {
          oprot.writeFieldBegin(CP_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.cpLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpPackage != null) {
        if (struct.isSetCpPackage()) {
          oprot.writeFieldBegin(CP_PACKAGE_FIELD_DESC);
          oprot.writeString(struct.cpPackage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpIcon != null) {
        if (struct.isSetCpIcon()) {
          oprot.writeFieldBegin(CP_ICON_FIELD_DESC);
          oprot.writeString(struct.cpIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpApk != null) {
        if (struct.isSetCpApk()) {
          oprot.writeFieldBegin(CP_APK_FIELD_DESC);
          oprot.writeString(struct.cpApk);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpMemo != null) {
        if (struct.isSetCpMemo()) {
          oprot.writeFieldBegin(CP_MEMO_FIELD_DESC);
          oprot.writeString(struct.cpMemo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpImgs != null) {
        if (struct.isSetCpImgs()) {
          oprot.writeFieldBegin(CP_IMGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cpImgs.size()));
            for (String _iter73 : struct.cpImgs)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpclass != null) {
        if (struct.isSetCpclass()) {
          oprot.writeFieldBegin(CPCLASS_FIELD_DESC);
          oprot.writeString(struct.cpclass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTurn_type()) {
        oprot.writeFieldBegin(TURN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.turn_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParam_type()) {
        oprot.writeFieldBegin(PARAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.param_type);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.third_url != null) {
        if (struct.isSetThird_url()) {
          oprot.writeFieldBegin(THIRD_URL_FIELD_DESC);
          oprot.writeString(struct.third_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLinkurl_type()) {
        oprot.writeFieldBegin(LINKURL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.linkurl_type);
        oprot.writeFieldEnd();
      }
      if (struct.activeUri != null) {
        if (struct.isSetActiveUri()) {
          oprot.writeFieldBegin(ACTIVE_URI_FIELD_DESC);
          oprot.writeString(struct.activeUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScreenOnAct()) {
        oprot.writeFieldBegin(SCREEN_ON_ACT_FIELD_DESC);
        oprot.writeI32(struct.screenOnAct);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSilentInstallRate()) {
        oprot.writeFieldBegin(SILENT_INSTALL_RATE_FIELD_DESC);
        oprot.writeI32(struct.silentInstallRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveRate()) {
        oprot.writeFieldBegin(ACTIVE_RATE_FIELD_DESC);
        oprot.writeI32(struct.activeRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClickRate()) {
        oprot.writeFieldBegin(CLICK_RATE_FIELD_DESC);
        oprot.writeI32(struct.clickRate);
        oprot.writeFieldEnd();
      }
      if (struct.cpApkMd5 != null) {
        if (struct.isSetCpApkMd5()) {
          oprot.writeFieldBegin(CP_APK_MD5_FIELD_DESC);
          oprot.writeString(struct.cpApkMd5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpApkSize()) {
        oprot.writeFieldBegin(CP_APK_SIZE_FIELD_DESC);
        oprot.writeI64(struct.cpApkSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdMutiActionTupleSchemeFactory implements SchemeFactory {
    public AdMutiActionTupleScheme getScheme() {
      return new AdMutiActionTupleScheme();
    }
  }

  private static class AdMutiActionTupleScheme extends TupleScheme<AdMutiAction> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AdMutiAction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type);
      BitSet optionals = new BitSet();
      if (struct.isSetGuideTitle()) {
        optionals.set(0);
      }
      if (struct.isSetButtonName()) {
        optionals.set(1);
      }
      if (struct.isSetLinkurl()) {
        optionals.set(2);
      }
      if (struct.isSetPhone()) {
        optionals.set(3);
      }
      if (struct.isSetCpName()) {
        optionals.set(4);
      }
      if (struct.isSetCpAuthor()) {
        optionals.set(5);
      }
      if (struct.isSetCpVersion()) {
        optionals.set(6);
      }
      if (struct.isSetCpLanguage()) {
        optionals.set(7);
      }
      if (struct.isSetCpPackage()) {
        optionals.set(8);
      }
      if (struct.isSetCpIcon()) {
        optionals.set(9);
      }
      if (struct.isSetCpApk()) {
        optionals.set(10);
      }
      if (struct.isSetCpMemo()) {
        optionals.set(11);
      }
      if (struct.isSetCpImgs()) {
        optionals.set(12);
      }
      if (struct.isSetCpclass()) {
        optionals.set(13);
      }
      if (struct.isSetTurn_type()) {
        optionals.set(14);
      }
      if (struct.isSetParam_type()) {
        optionals.set(15);
      }
      if (struct.isSetAction()) {
        optionals.set(16);
      }
      if (struct.isSetThird_url()) {
        optionals.set(17);
      }
      if (struct.isSetLinkurl_type()) {
        optionals.set(18);
      }
      if (struct.isSetActiveUri()) {
        optionals.set(19);
      }
      if (struct.isSetScreenOnAct()) {
        optionals.set(20);
      }
      if (struct.isSetSilentInstallRate()) {
        optionals.set(21);
      }
      if (struct.isSetActiveRate()) {
        optionals.set(22);
      }
      if (struct.isSetClickRate()) {
        optionals.set(23);
      }
      if (struct.isSetCpApkMd5()) {
        optionals.set(24);
      }
      if (struct.isSetCpApkSize()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetGuideTitle()) {
        oprot.writeString(struct.guideTitle);
      }
      if (struct.isSetButtonName()) {
        oprot.writeString(struct.buttonName);
      }
      if (struct.isSetLinkurl()) {
        oprot.writeString(struct.linkurl);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetCpName()) {
        oprot.writeString(struct.cpName);
      }
      if (struct.isSetCpAuthor()) {
        oprot.writeString(struct.cpAuthor);
      }
      if (struct.isSetCpVersion()) {
        oprot.writeString(struct.cpVersion);
      }
      if (struct.isSetCpLanguage()) {
        oprot.writeString(struct.cpLanguage);
      }
      if (struct.isSetCpPackage()) {
        oprot.writeString(struct.cpPackage);
      }
      if (struct.isSetCpIcon()) {
        oprot.writeString(struct.cpIcon);
      }
      if (struct.isSetCpApk()) {
        oprot.writeString(struct.cpApk);
      }
      if (struct.isSetCpMemo()) {
        oprot.writeString(struct.cpMemo);
      }
      if (struct.isSetCpImgs()) {
        {
          oprot.writeI32(struct.cpImgs.size());
          for (String _iter74 : struct.cpImgs)
          {
            oprot.writeString(_iter74);
          }
        }
      }
      if (struct.isSetCpclass()) {
        oprot.writeString(struct.cpclass);
      }
      if (struct.isSetTurn_type()) {
        oprot.writeI32(struct.turn_type);
      }
      if (struct.isSetParam_type()) {
        oprot.writeI32(struct.param_type);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetThird_url()) {
        oprot.writeString(struct.third_url);
      }
      if (struct.isSetLinkurl_type()) {
        oprot.writeI32(struct.linkurl_type);
      }
      if (struct.isSetActiveUri()) {
        oprot.writeString(struct.activeUri);
      }
      if (struct.isSetScreenOnAct()) {
        oprot.writeI32(struct.screenOnAct);
      }
      if (struct.isSetSilentInstallRate()) {
        oprot.writeI32(struct.silentInstallRate);
      }
      if (struct.isSetActiveRate()) {
        oprot.writeI32(struct.activeRate);
      }
      if (struct.isSetClickRate()) {
        oprot.writeI32(struct.clickRate);
      }
      if (struct.isSetCpApkMd5()) {
        oprot.writeString(struct.cpApkMd5);
      }
      if (struct.isSetCpApkSize()) {
        oprot.writeI64(struct.cpApkSize);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AdMutiAction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.guideTitle = iprot.readString();
        struct.setGuideTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buttonName = iprot.readString();
        struct.setButtonNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.linkurl = iprot.readString();
        struct.setLinkurlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpName = iprot.readString();
        struct.setCpNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpAuthor = iprot.readString();
        struct.setCpAuthorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cpVersion = iprot.readString();
        struct.setCpVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cpLanguage = iprot.readString();
        struct.setCpLanguageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cpPackage = iprot.readString();
        struct.setCpPackageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cpIcon = iprot.readString();
        struct.setCpIconIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cpApk = iprot.readString();
        struct.setCpApkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cpMemo = iprot.readString();
        struct.setCpMemoIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cpImgs = new ArrayList<String>(_list75.size);
          String _elem76;
          for (int _i77 = 0; _i77 < _list75.size; ++_i77)
          {
            _elem76 = iprot.readString();
            struct.cpImgs.add(_elem76);
          }
        }
        struct.setCpImgsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cpclass = iprot.readString();
        struct.setCpclassIsSet(true);
      }
      if (incoming.get(14)) {
        struct.turn_type = iprot.readI32();
        struct.setTurn_typeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.param_type = iprot.readI32();
        struct.setParam_typeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.third_url = iprot.readString();
        struct.setThird_urlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.linkurl_type = iprot.readI32();
        struct.setLinkurl_typeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.activeUri = iprot.readString();
        struct.setActiveUriIsSet(true);
      }
      if (incoming.get(20)) {
        struct.screenOnAct = iprot.readI32();
        struct.setScreenOnActIsSet(true);
      }
      if (incoming.get(21)) {
        struct.silentInstallRate = iprot.readI32();
        struct.setSilentInstallRateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.activeRate = iprot.readI32();
        struct.setActiveRateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.clickRate = iprot.readI32();
        struct.setClickRateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.cpApkMd5 = iprot.readString();
        struct.setCpApkMd5IsSet(true);
      }
      if (incoming.get(25)) {
        struct.cpApkSize = iprot.readI64();
        struct.setCpApkSizeIsSet(true);
      }
    }
  }

}

