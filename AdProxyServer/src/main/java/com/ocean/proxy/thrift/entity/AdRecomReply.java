/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.proxy.thrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-4-13")
public class AdRecomReply implements org.apache.thrift.TBase<AdRecomReply, AdRecomReply._Fields>, java.io.Serializable, Cloneable, Comparable<AdRecomReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdRecomReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AD_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ad_contents", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REQUST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requstId", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdRecomReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdRecomReplyTupleSchemeFactory());
  }

  public int status; // required
  public List<AdContent> ad_contents; // optional
  public String requstId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    AD_CONTENTS((short)2, "ad_contents"),
    REQUST_ID((short)3, "requstId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // AD_CONTENTS
          return AD_CONTENTS;
        case 3: // REQUST_ID
          return REQUST_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AD_CONTENTS,_Fields.REQUST_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("ad_contents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdContent.class))));
    tmpMap.put(_Fields.REQUST_ID, new org.apache.thrift.meta_data.FieldMetaData("requstId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdRecomReply.class, metaDataMap);
  }

  public AdRecomReply() {
  }

  public AdRecomReply(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdRecomReply(AdRecomReply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetAd_contents()) {
      List<AdContent> __this__ad_contents = new ArrayList<AdContent>(other.ad_contents.size());
      for (AdContent other_element : other.ad_contents) {
        __this__ad_contents.add(new AdContent(other_element));
      }
      this.ad_contents = __this__ad_contents;
    }
    if (other.isSetRequstId()) {
      this.requstId = other.requstId;
    }
  }

  public AdRecomReply deepCopy() {
    return new AdRecomReply(this);
  }

  
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.ad_contents = null;
    this.requstId = null;
  }

  public int getStatus() {
    return this.status;
  }

  public AdRecomReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getAd_contentsSize() {
    return (this.ad_contents == null) ? 0 : this.ad_contents.size();
  }

  public java.util.Iterator<AdContent> getAd_contentsIterator() {
    return (this.ad_contents == null) ? null : this.ad_contents.iterator();
  }

  public void addToAd_contents(AdContent elem) {
    if (this.ad_contents == null) {
      this.ad_contents = new ArrayList<AdContent>();
    }
    this.ad_contents.add(elem);
  }

  public List<AdContent> getAd_contents() {
    return this.ad_contents;
  }

  public AdRecomReply setAd_contents(List<AdContent> ad_contents) {
    this.ad_contents = ad_contents;
    return this;
  }

  public void unsetAd_contents() {
    this.ad_contents = null;
  }

  /** Returns true if field ad_contents is set (has been assigned a value) and false otherwise */
  public boolean isSetAd_contents() {
    return this.ad_contents != null;
  }

  public void setAd_contentsIsSet(boolean value) {
    if (!value) {
      this.ad_contents = null;
    }
  }

  public String getRequstId() {
    return this.requstId;
  }

  public AdRecomReply setRequstId(String requstId) {
    this.requstId = requstId;
    return this;
  }

  public void unsetRequstId() {
    this.requstId = null;
  }

  /** Returns true if field requstId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequstId() {
    return this.requstId != null;
  }

  public void setRequstIdIsSet(boolean value) {
    if (!value) {
      this.requstId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case AD_CONTENTS:
      if (value == null) {
        unsetAd_contents();
      } else {
        setAd_contents((List<AdContent>)value);
      }
      break;

    case REQUST_ID:
      if (value == null) {
        unsetRequstId();
      } else {
        setRequstId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case AD_CONTENTS:
      return getAd_contents();

    case REQUST_ID:
      return getRequstId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case AD_CONTENTS:
      return isSetAd_contents();
    case REQUST_ID:
      return isSetRequstId();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdRecomReply)
      return this.equals((AdRecomReply)that);
    return false;
  }

  public boolean equals(AdRecomReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ad_contents = true && this.isSetAd_contents();
    boolean that_present_ad_contents = true && that.isSetAd_contents();
    if (this_present_ad_contents || that_present_ad_contents) {
      if (!(this_present_ad_contents && that_present_ad_contents))
        return false;
      if (!this.ad_contents.equals(that.ad_contents))
        return false;
    }

    boolean this_present_requstId = true && this.isSetRequstId();
    boolean that_present_requstId = true && that.isSetRequstId();
    if (this_present_requstId || that_present_requstId) {
      if (!(this_present_requstId && that_present_requstId))
        return false;
      if (!this.requstId.equals(that.requstId))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_ad_contents = true && (isSetAd_contents());
    list.add(present_ad_contents);
    if (present_ad_contents)
      list.add(ad_contents);

    boolean present_requstId = true && (isSetRequstId());
    list.add(present_requstId);
    if (present_requstId)
      list.add(requstId);

    return list.hashCode();
  }

  
  public int compareTo(AdRecomReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAd_contents()).compareTo(other.isSetAd_contents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd_contents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad_contents, other.ad_contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequstId()).compareTo(other.isSetRequstId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequstId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requstId, other.requstId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("AdRecomReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetAd_contents()) {
      if (!first) sb.append(", ");
      sb.append("ad_contents:");
      if (this.ad_contents == null) {
        sb.append("null");
      } else {
        sb.append(this.ad_contents);
      }
      first = false;
    }
    if (isSetRequstId()) {
      if (!first) sb.append(", ");
      sb.append("requstId:");
      if (this.requstId == null) {
        sb.append("null");
      } else {
        sb.append(this.requstId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdRecomReplyStandardSchemeFactory implements SchemeFactory {
    public AdRecomReplyStandardScheme getScheme() {
      return new AdRecomReplyStandardScheme();
    }
  }

  private static class AdRecomReplyStandardScheme extends StandardScheme<AdRecomReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdRecomReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AD_CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list342 = iprot.readListBegin();
                struct.ad_contents = new ArrayList<AdContent>(_list342.size);
                AdContent _elem343;
                for (int _i344 = 0; _i344 < _list342.size; ++_i344)
                {
                  _elem343 = new AdContent();
                  _elem343.read(iprot);
                  struct.ad_contents.add(_elem343);
                }
                iprot.readListEnd();
              }
              struct.setAd_contentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requstId = iprot.readString();
              struct.setRequstIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdRecomReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.ad_contents != null) {
        if (struct.isSetAd_contents()) {
          oprot.writeFieldBegin(AD_CONTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ad_contents.size()));
            for (AdContent _iter345 : struct.ad_contents)
            {
              _iter345.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requstId != null) {
        if (struct.isSetRequstId()) {
          oprot.writeFieldBegin(REQUST_ID_FIELD_DESC);
          oprot.writeString(struct.requstId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdRecomReplyTupleSchemeFactory implements SchemeFactory {
    public AdRecomReplyTupleScheme getScheme() {
      return new AdRecomReplyTupleScheme();
    }
  }

  private static class AdRecomReplyTupleScheme extends TupleScheme<AdRecomReply> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, AdRecomReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetAd_contents()) {
        optionals.set(0);
      }
      if (struct.isSetRequstId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAd_contents()) {
        {
          oprot.writeI32(struct.ad_contents.size());
          for (AdContent _iter346 : struct.ad_contents)
          {
            _iter346.write(oprot);
          }
        }
      }
      if (struct.isSetRequstId()) {
        oprot.writeString(struct.requstId);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, AdRecomReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list347 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ad_contents = new ArrayList<AdContent>(_list347.size);
          AdContent _elem348;
          for (int _i349 = 0; _i349 < _list347.size; ++_i349)
          {
            _elem348 = new AdContent();
            _elem348.read(iprot);
            struct.ad_contents.add(_elem348);
          }
        }
        struct.setAd_contentsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requstId = iprot.readString();
        struct.setRequstIdIsSet(true);
      }
    }
  }

}

